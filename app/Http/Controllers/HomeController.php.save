<?php

namespace App\Http\Controllers;

use Illuminate\Support\Collection;
use Barryvdh\Debugbar\Facade as Debugbar;
use Illuminate\Support\Facades\Input;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\View;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Cache;
use App\Notifications\FiledLogin;
use App\CategoryTarget;
use App\GstTable;
use App\Mail\orderconfirmation;
use Illuminate\Support\Facades\Crypt;
use App\Mail\invoicomee;
use App\FLOORINGS;
use App\Department;
use App\AssignCategory;
use App\assign_manufacturers;
use App\User;
use App\CustomerDetails;
use App\Builder;
use App\UpdatedReport;
use App\Group;
use App\Salesofficer;
use App\Ward;
use App\MultipleInvoice;
use App\Tlwards;
use App\Country;
use App\SubWard;
use App\WardAssignment;
use App\ProjectDetails;
use App\SiteAddress;
use App\Territory;
use App\State;
use App\Zone;
use App\Checklist;
use App\training;
use App\loginTime;
use App\Requirement;
use App\ProcurementDetails;
use App\SiteEngineerDetails;
use App\OwnerDetails;
use App\ConsultantDetails;
use App\attendance;
use App\ContractorDetails;
use App\salesassignment;
use App\Report;
use App\RoomType;
use App\WardMap;
use Auth;
use DB;
use App\Manager_Deatils;
use App\Salescontact_Details;
use App\Mowner_Deatils;
use App\EmployeeDetails;
use Validator;
use App\BankDetails;
use App\Asset;
use App\AssetInfo;
use App\Category;
use App\SubCategory;
use App\CategoryPrice;
use App\ManufacturerDetail;
use App\Certificate;
use App\MhInvoice;
use App\ProjectUpdate;
use App\ActivityLog;
use App\Order;
use App\Stages;
use App\Dates;
use App\Map;
use App\brand;
use App\Point;
use App\Message;
use App\ZoneMap;
use App\SubWardMap;
use App\UserLocation;
use App\AssignStage;
use App\History;
use App\Assignenquiry;
use App\ProjectImage;
use App\EnquiryQuantity;
use App\AssignNumber;
use App\MamaSms;
use Carbon\Carbon;
use App\numbercount;
use App\numbers;
use App\Payment;
use App\Detail;
use App\Projection;
use App\Conversion;
use App\Utilization;
use App\Planning;
use App\CapitalExpenditure;
use App\OperationalExpenditure;
use App\NumberOfZones;
use App\Pricing;
use GuzzleHttp\Client;
use App\Manufacturer;
use App\Manufacturers;
use App\FieldLogin;
use App\BreakTime;
use App\PaymentDetails;
use App\MamahomePrice;
use App\Supplierdetails;
use App\Mprocurement_Details;
use App\Gst;
use App\SupplierInvoice;
use App\assign_states_dist;
use App\CustomerType;
use App\PaymentHistory;
use App\Denomination;
use App\CustomerGst;
use App\GradeRange;
use App\customerassign;
use App\VisitedCustomers;
use Spatie\Activitylog\Models\Activity;
use App\states_dists;
date_default_timezone_set("Asia/Kolkata");
class HomeController extends Controller
{


    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('auth');
        $this->middleware(function ($request, $next) {
            $this->user= Auth::user();
            $message = Message::where('read_by','NOT LIKE',"%".$this->user->id."%")->count();
            View::share('chatcount', $message);
            $trainingCount = training::where('dept',$this->user->department_id)
                            ->where('designation',$this->user->group_id)
                            ->where('viewed_by','NOT LIKE',"%".$this->user->id."%")->count();
            View::share('trainingCount',$trainingCount);
            return $next($request);
        });
    }

    /**
     * Show the application dashboard.
     *
     * @return \Illuminate\Http\Response
     */
    public function authlogin()
    {
        date_default_timezone_set("Asia/Kolkata");
        $check = loginTime::where('user_id',Auth::user()->id)->where('logindate',date('Y-m-d'))->get();
        if(count($check)==0){
            $login = New loginTime;
            $login->user_id = Auth::user()->id;
            $login->logindate = date('Y-m-d');
            $login->loginTime = date('H:i A');
            $login->logoutTime = "N/A";
            $login->save();
        }
        $activity = new ActivityLog;
        $activity->time = date('Y-m-d H:i A');
        $activity->employee_id = Auth::user()->employeeId;
        $activity->activity = Auth::user()->name." has logged in to the system at ".date('H:i A');
        $activity->save();
    return redirect('/home');
    }
    public function authlogout(Request $request)
    {
        date_default_timezone_set("Asia/Kolkata");
        $activity = new ActivityLog;
        $activity->time = date('Y-m-d H:i A');
        $activity->employee_id = Auth::user()->employeeId;
        $activity->activity = Auth::user()->name." has logged out of the system at ".date('H:i A');
        $activity->save();
        Auth()->logout();
        $request->session()->invalidate();
        return redirect('/');
    }
    public function inputview(Request $request)
    {
           


        $date=date('Y-m-d');
        $log = FieldLogin::where('user_id',Auth::user()->id)->where('created_at','LIKE',$date.'%')->count();
         $log1 = FieldLogin::where('user_id',Auth::user()->id)->where('logout','!=','NULL')->pluck('logout')->count();
        $category = Category::where('category_name','!=',"STEEL")->get();
        $steel = Category::where('category_name',"STEEL")->get();
        $brand = brand::leftjoin('category','category.id','=','brands.category_id')
                ->select('brand')->get();

        $depart1 = [6];
        $depart2 = [7];
        $depart = [2,4,8,6,7,15,17,16,1,11,22,10];
        $projects = ProjectDetails::where('project_id', $request->projectId)->first();
        $users = User::whereIn('group_id',$depart)->get();
       $users1 = User::whereIn('group_id',$depart1)->where('department_id','!=',10)->where('name',Auth::user()->name)->get();
       $users2 = User::whereIn('group_id',$depart2)->where('department_id','!=',10)->where('name',Auth::user()->name)->get();
       $states = State::all();
       $categories = Category::all();
        return view('inputview',['category'=>$category,'users'=>$users,'users1'=>$users1,'users2'=>$users2,'projects'=>$projects,'brand'=>$brand,'log'=>$log,'log1'=>$log1,'states'=>$states,'steel'=>$steel,'categories'=>$categories]);
    }
    public function inputdata(Request $request)
    {

          
           $user_id = User::where('id',Auth::user()->id)->pluck('id')->first();
           $cat = category::where('id',$request->cat)->pluck('id')->first();

         if($request->name){

              $billaddress = $request->shipaddress;
         }
         else{
            
           $billaddress = $request->billaddress;
         }


            if($request->subcat != null){

             if(count($request->withgst) == 0){
            $validator = Validator::make($request->all(), [
            'subcat' => 'required'


            ]);
            if ($validator->fails()) {
                return back()
                ->with('NotAdded','Select Category Before Submit')
                ->withErrors($validator)
                ->withInput();
            }
             }
          
            $sub = SubCategory::where('id',$request->subcat)->pluck('sub_cat_name')->first();
            $qnty = $sub.":".$request->totalquantity;//new code
            $sub_cat_name = SubCategory::whereIn('id',$request->subcat)->pluck('id')->toArray();
            $subcategories = implode(", ", $sub_cat_name);
            // fetching brands
            $brand_ids = SubCategory::whereIn('id',$request->subcat)->pluck('brand_id')->toArray();
            $brand = brand::whereIn('id',$brand_ids)->pluck('brand')->toArray();
            $brandnames = implode(", ", $brand);

            $category_ids = SubCategory::whereIn('id',$request->subcat)->pluck('category_id')->toArray();
            $category= Category::whereIn('id',$category_ids)->pluck('category_name')->toArray();
            $categoryNames = implode(", ", $category);
            $totalquantity = $request->totalquantity;
            $price = $request->prices;
            $steel_price = null;
            $steel_quantity = null;
           }
           else if($request->subcat == null &&  count($request->subcatsteel) != 0 && count($request->cat255[0]) == 0 ){
            // $sub_cat_name = SubCategory::whereIn('id',$request->subcatsteel)->pluck('sub_cat_name')->toArray();
             if(count($request->withgst) == 0){
            $validator = Validator::make($request->all(), [
            'subcatsteel' => 'required'
            ]);
            if ($validator->fails()) {
                return back()
                ->with('NotAdded','Select Category Before Submit')
                ->withErrors($validator)
                ->withInput();
            }
          }
            $subcategories = implode(", ",$request->subcatsteel);
            // fetching brands
            $brand_ids = SubCategory::whereIn('id',$request->subcatsteel)->pluck('brand_id')->toArray();
            $brand = brand::whereIn('id',$brand_ids)->pluck('brand')->toArray();
            $brandnames = implode(", ", $brand);

            $categoryNames = "STEEL";
            $totalquantity = null;
            $price = null;
            $get = implode(", ",array_filter($request->steelquan));
            $another = explode(", ",$get);
                
            ($request->subcatsteel);
             for($i = 0;$i < count($request->subcatsteel); $i++){
                if($i == 0){
                    $sub = SubCategory::where('id',$request->subcatsteel[$i])->pluck('sub_cat_name')->first();
                         $qnty = $sub.":".$another[$i];
                    }else{
                         $sub = SubCategory::where('id',$request->subcatsteel[$i])->pluck('sub_cat_name')->first();
                         $qnty .= ", ".$sub.":".$another[$i];

                     }
                 }
            $steel_quantity = implode(",",array_filter($request->steelquan));
            $steel_price = implode(",",array_filter($request->steelprice));
           }

           else if(count($request->cat255[0]) > 0 && count($request->withgst[0]) == 0 && $request->subcat == null){
                    
                $categoryNames =Category::where('id',$request->cat255[0])->pluck('category_name')->first();
                $brandnames =  brand::where('id',$request->brand55[0])->pluck('brand')->first();
               $subcategories = "";
               $qnty = array_sum($request->quan1);
               $price =$request->price1[0];
               $totalquantity=array_sum($request->quan1);
               $steel_price=0;
               $steel_quantity=0;
           }

           else{
               $categoryNames = "FLOORINGS";
               $brandnames =  brand::where('id',$request->cat25[0])->pluck('brand')->first();
               $subcategories = "";
               $qnty = array_sum($request->quan);
               $price =$request->price[0];
               $totalquantity=array_sum($request->quan);
               $steel_price=0;
               $steel_quantity=0;
           }

            $points = new Point;
            $points->user_id = $request->initiator;
            $points->point = 100;
            $points->type = "Add";
            $points->reason = "Generating an enquiry";
            $points->save();
            $var = count($request->subcat);
            $var1 = count($brandnames);
       // dd($request->totalquantity);

       if($request->framework){
          $lng = implode(",",$request->framework);
       }else{
        $lng = "";
       }


     


        $x = DB::table('requirements')->insert(['project_id'    =>$request->selectprojects,
                                                'main_category' => $categoryNames,
                                                'brand' => $brandnames,
                                                'sub_category'  =>$subcategories,
                                                'follow_up' =>'',
                                                'follow_up_by' =>'',
                                                'material_spec' =>'',
                                                'referral_image1'   =>'',
                                                'referral_image2'   =>'',
                                                'requirement_date'  =>$request->txtDate,
                                                'measurement_unit'  =>$request->measure != null?$request->measure:'',
                                                'unit_price'   => '',
                                                 'quantity'     =>$qnty,
                                                'total'   =>0,
                                                'notes'  =>$request->eremarks,
                                                'created_at' => date('Y-m-d H:i:s'),
                                                'updated_at' => date('Y-m-d H:i:s'),
                                                'status' => "Enquiry On Process",
                                                'dispatch_status' => "Not yet dispatched",
                                                'generated_by' => $request->initiator,
                                                'billadress'=>$billaddress,
                                                'ship' =>$request->shipaddress,
                                                'price' =>$price,
                                                'State'=>$request->states,
                                                'total_quantity' =>$totalquantity,
                                                'steelprice'=>$steel_price,
                                                'steelquantity'=>$steel_quantity,
                                                'language'=>$lng,
                                                'cid'=>$request->cid
                                                
                                        ]);
                                $x = DB::getPdo()->lastInsertId();
        
// --------------------------------------flooring detaisl-----------------------------------------------------------
               
        if(count($request->withgst[0]) != 0){
           
$category =48;
$subcat = $request->cat25;           
$unitprice = $request->unitprice;
$desc = $request->desc;
$hsn = $request->hsn;
$sqrt = $request->sqrt;
$l = $request->l;
$b = $request->b;
$quan = $request->quan;
$price = $request->price;
$unit = $request->unit;
$state = $request->state;
$gst = $request->gst;
$withgst = $request->withgst;
$withoutgst = $request->withoutgst;
$unitprice = $request->unitprice;

  for ($i=0; $i <count($gst); $i++) { 
       
       $newdata =  new FLOORINGS;
       $newdata->category =48;
       $newdata->subcat =$subcat[$i];
       $newdata->unitprice =$unitprice[$i];
       $newdata->description =$desc[$i];
       $newdata->sqrt =$sqrt[$i];
       $newdata->l =$l[$i];
       $newdata->b =$b[$i];
        $newdata->hsn =$hsn[$i];
       $newdata->unit =$unit[$i];
       $newdata->quan =$quan[$i]; 
       $newdata->price =$price[$i];
       $newdata->state =$state[$i];
       $newdata->gst =$gst[$i];
       $newdata->withgst = $withgst[$i];
       $newdata->withoutgst = $withoutgst[$i];
       $newdata->req_id = $x;
       $newdata->unitprice = $unitprice[$i];

      $newdata->save();
  }

       


        }

if(count($request->cat255[0]) != 0){
           
$category = $request->cat255;
$subcat = $request->brand55;           
$unitprice = $request->unitprice1;
$desc = $request->desc1;
$hsn = $request->hsn1;
$sqrt = $request->sqrt1;
$quan = $request->quan1;
$price = $request->price1;
$unit = $request->unit1;
$state = $request->state12;
$gst = $request->gst1;
$withgst = $request->withgst1;
$withoutgst = $request->withoutgst1;

  for ($i=0; $i <count($gst); $i++) { 
       
       $newdata =  new FLOORINGS;
       $newdata->category =$category[$i];
       $newdata->subcat =$subcat[$i];
       $newdata->unitprice =$unitprice[0];
       $newdata->description =$desc[$i];
       $newdata->sqrt =$sqrt[$i];
        $newdata->hsn =$hsn[$i];
       $newdata->unit =$unit[$i];
       $newdata->quan =$quan[$i]; 
       $newdata->price =$price[$i];
       $newdata->state =$state[$i];
       $newdata->gst =$gst[$i];
       $newdata->withgst = $withgst[$i];
       $newdata->withoutgst = $withoutgst[$i];
       $newdata->req_id = $x;
       $newdata->unitprice = $unitprice[$i];

      $newdata->save();
  }

       


        }




// -------------------------------------------------end flooring------------------------------------------------------------
       
       //customer gst 
        if($request->cgst != null){
            $number = $request->econtact;
            $check = CustomerGst::where('customer_phonenumber',$number)->count();
            
            if($check == 0){
            $customergst = strtoupper($request->cgst);
            $contractor = ContractorDetails::where('project_id',$request->selectprojects)->pluck('contractor_contact_no')->first();
            $site = SiteEngineerDetails::where('project_id',$request->selectprojects)->pluck('site_engineer_contact_no')->first();
            $owner = OwnerDetails::where('project_id',$request->selectprojects)->pluck('owner_contact_no')->first();
            $consult = ConsultantDetails::where('project_id',$request->selectprojects)->pluck('consultant_contact_no')->first();

            $customer = new CustomerGst;
            $customer->customer_gst = $customergst;
            $customer->customer_phonenumber = $number;
            $customer->contractor_no = $contractor;
            $customer->site_engineer_no = $site;
            $customer->owner_no = $owner;
            $customer->consultant_no = $consult;
            $customer->save();
            // $country_code = Country::pluck('country_code')->first();
            // $zone = Zone::pluck('zone_number')->first();
            // $cus_id = "MH_".$country_code."_".$zone."_C".$customer->id;
            // $cid = CustomerGst::where('customer_phonenumber',$number)->update(['customer_id'=>$cus_id]);
            }
        }
       // end
        // activitylog
        $activity = new ActivityLog;
        $activity->time = date('Y-m-d H:iconv(in_charset, out_charset, str) A');
        $activity->employee_id = Auth::user()->employeeId;
        $activity->activity = Auth::user()->name." has added a new requirement for project id: ".$request->selectprojects." at ".date('H:i A');
        $uproject = ProjectDetails::where('project_id',$request->selectprojects)->pluck('updated_by')->first();
        $qproject = ProjectDetails::where('project_id',$request->selectprojects)->pluck('quality')->first();
        $fproject = ProjectDetails::where('project_id',$request->selectprojects)->pluck('followup')->first();
        $eproject = Requirement::where('project_id',$request->selectprojects)->pluck('generated_by')->first();
         $project = ProjectDetails::where('project_id',$request->selectprojects)->pluck('sub_ward_id')->first();
        $activity->sub_ward_id = $project;
        $activity->updater = $uproject;
        $activity->quality = $qproject;
        $activity->followup = $fproject;
        if(count($eproject) != 0){
        
       $activity->enquiry = $eproject;
       }
        else{
       $activity->enquiry ="null";

        }

        $activity->project_id = $request->selectprojects;
        // $activity->req_id = $requirement->id;
        $activity->typeofactivity = "Add Enquiry";
        $activity->save();
        // $y = DB::table('quantity')->insert(['req_id' =>$request->requirements->id,
        //                                     'project_id'=>$request->selectprojects


        //         ]);
        if($x)
        {
            return back()->with('success','Enquiry Raised Successfully !!!');
        }
        else
        {
            return back()->with('success','Error Occurred !!!');
        }
    }

    public function getProjects(Request $request)
    {
        $contact = $request->contact;
        $x = ProjectDetails::join('procurement_details','procurement_details.project_id','=','project_details.project_id')
                            ->where('procurement_details.procurement_contact_no',$contact)
                            ->get();
        if(count($x)==0){
            $x = ProjectDetails::join('consultant_details','consultant_details.project_id','=','project_details.project_id')
                                ->where('consultant_details.consultant_contact_no',$contact)
                                ->get();
            if(count($x) == 0)
            {
                $x = ProjectDetails::join('site_engineer_details','site_engineer_details.project_id','=','project_details.project_id')
                        ->where('site_engineer_details.site_engineer_contact_no',$contact)
                        ->get();
                if(count($x) == 0)
                {
                    $x = ProjectDetails::join('contractor_details','contractor_details.project_id','=','project_details.project_id')
                        ->where('contractor_details.contractor_contact_no',$contact)
                        ->get();
                    if(count($x) == 0)
                    {
                        $x = ProjectDetails::join('owner_details','owner_details.project_id','=','project_details.project_id')
                                            ->where('owner_details.owner_contact_no',$contact)
                                            ->get();
                        if(count($x) == 0){
                            $x = 'Nothing Found';
                        }
                    }
                }
            }
        }
            $id = CustomerDetails::where('mobile_num',$contact)->pluck('customer_id')->first();

            $gst = GstTable::where('customer_id',$id)->pluck('gst_number')->first();
            $cname =CustomerDetails::where('customer_id',$id)->pluck('first_name')->first(); 
        
        if($x)
        {
            return response()->json(['x'=>$x,'id'=>$id,'gst'=>$gst,'cname'=>$cname]);
        }
        else
        {
            return response()->json('Nothing Found');
        }
    }


 public function getmanuProjects(Request $request)
    {
        $contact = $request->contact;
        
    
       $x = Manufacturer::join('mprocurement_details','mprocurement_details.manu_id','=','manufacturers.id')
                                ->where('mprocurement_details.contact',$contact)
                                ->get();
        if(count($x)==0){
               $x = Manufacturer::join('manager_details','manager_details.manu_id','=','manufacturers.id')
                            ->where('manager_details.contact',$contact)
                            ->get();

            if(count($x) == 0)
            {
                $x = Manufacturer::join('mowner_details','mowner_details.manu_id','=','manufacturers.id')
                        ->where('mowner_details.contact',$contact)
                        ->get();
                if(count($x) == 0)
                {                                                                                                                                                               
                    $x = Manufacturer::join('salescontact_details','salescontact_details.manu_id','=','manufacturers.id')
                        ->where('salescontact_details.contact',$contact)
                        ->get();
                        if(count($x) == 0){
                            $x = 'Nothing Found';
                        }
                }
            }
        }
            $id = CustomerDetails::where('mobile_num',$contact)->pluck('customer_id')->first();
            $gst = GstTable::where('customer_id',$id)->pluck('gst_number')->first();
            $cname =CustomerDetails::where('customer_id',$id)->pluck('first_name')->first(); 
        
        if($x)
        {
            return response()->json(['x'=>$x,'id'=>$id,'gst'=>$gst,'cname'=>$cname]);
        }
        else
        {
            return response()->json('Nothing Found');
        }
    }






    public function enquirysheet1(Request $request)
    {
          
        $totalofenquiry = "";
        $totalenq = "";
        
        $s = Tlwards::where('user_id',Auth::user()->id)->pluck('ward_id')->first();
       $etl = explode(",",$s);
       $wardwise =Ward::whereIn('id',$etl)->get();

        $wardss = Tlwards::where('user_id',Auth::user()->id)->pluck('ward_id')->first();
         $tlward = explode(",",$wardss);
         $totalofenquiry = "";
        $totalenq = "";
        $converter = user::get();
        $ward = Ward::get();
        $wards = SubWard::orderby('sub_ward_name','ASC')->get();

        $sub = SubWard::whereIn('ward_id',$tlward)->pluck('id');
        $pids = ProjectDetails::whereIn('sub_ward_id',$sub)->pluck('project_id');
        $this->variable=$pids;



        $ward = ward::orderby('ward_name','ASC')->get();
        $category = Category::all();
        $depart = [1,6,7,8,11,15,16,17,22,2];
        $initiators = User::whereIn('group_id',$depart)->get();
             // dd($request->status);
        if($request->status && !$request->category){
            if($request->status != "all"){

                $enquiries = Requirement::where('status','like','%'.$request->status)
                            ->where('status','!=',"Enquiry Cancelled")
                 ->orderby('created_at','DESC')
                            ->select('requirements.*')
                            ->get();
               $converter = user::get();
            $totalenq = count($enquiries);
                 
                }
            else{

                $enquiries = Requirement::where('status','!=',"Enquiry Cancelled")
                 ->orderby('created_at','DESC')

                            ->get();
                $converter = user::get();
            $totalenq = count($enquiries);
                
            }
        }elseif($request->status && $request->category){
            if($request->status != "all"){

                $enquiries = Requirement::where('status','like','%'.$request->status)
                            ->where('main_category',$request->category)
                            ->where('status','!=',"Enquiry Cancelled")
                 ->orderby('created_at','DESC')

                            ->get();
                $converter = user::get();
            $totalenq = count($enquiries);
               
            }else{

                $enquiries = Requirement::where('main_category',$request->category)
                            ->where('status','!=',"Enquiry Cancelled")
                 ->orderby('created_at','DESC')

                            ->get();
                $converter = user::get();
            $totalenq = count($enquiries);

               
            }
        }elseif($request->from && $request->to  && !$request->initiator && !$request->category && !$request->ward){
            // only from and to

            $from = $request->from;
            $to = $request->to;
            if($from == $to){
                $enquiries = Requirement::orderBy('created_at','DESC')
                            ->where('created_at','LIKE',$from."%")
                            ->where('status','!=',"Enquiry Cancelled")
                 ->orderby('created_at','DESC')
                            
                            ->get();
            $converter = user::get();
            $totalenq = count($enquiries);

            }else{
                $enquiries = Requirement::orderBy('created_at','DESC')
                            ->wheredate('created_at','>=',$from)
                            ->wheredate('created_at','<=',$to)
                            ->where('status','!=',"Enquiry Cancelled")
                 ->orderby('created_at','DESC')

                            ->get();
            $converter = user::get();
            $totalenq = count($enquiries);

            }
            
        }elseif(!$request->from && !$request->to && !$request->initiator && !$request->category && $request->ward && $request->enqward){
          
           if($request->ward == "All"){
            $subwardid = Subward::where('ward_id',$request->enqward)->pluck('id');    
            }else{
            $subwardid = Subward::where('id',$request->ward)->pluck('id');    
            }
            // only ward
            $enquiries = Requirement::leftjoin('project_details','project_details.project_id','=','requirements.project_id')
                        ->whereIn('project_details.sub_ward_id',$subwardid)
                        ->where('requirements.status','!=',"Enquiry Cancelled")
                 ->orderby('requirements.created_at','DESC')

                        ->get();
            $converter = user::get();
            $totalenq = count($enquiries);
            
        }elseif(!$request->from && !$request->to && !$request->initiator && $request->category && !$request->ward && !$request->enqward){
            // only category

            $enquiries = Requirement::where('main_category',$request->category)
                        ->where('status','!=',"Enquiry Cancelled")
                 ->orderby('created_at','DESC')
                       
                        ->get();
            $totalenq = count($enquiries);


          $converter = user::get();

            $totalofenquiry = Requirement::where('main_category',$request->category)->where('requirements.status','!=',"Enquiry Cancelled")->sum('quantity');
        }elseif(!$request->from && !$request->to && $request->initiator && !$request->category && !$request->ward){
            // only initiator
            $enquiries = Requirement::where('generated_by',$request->initiator)
                        ->where('status','!=',"Enquiry Cancelled")
                 ->orderby('created_at','DESC')

                        ->get();
            $converter = user::get();
            $totalenq = count($enquiries);

        }elseif($request->from && $request->to && $request->initiator && $request->category && $request->ward && $request->enqward){
            // everything
        
            if($request->ward == "All"){
            $subwardid = Subward::where('ward_id',$request->enqward)->pluck('id');    
            }else{
            $subwardid = Subward::where('id',$request->ward)->pluck('id');    
            }
            $from = $request->from;
            $to = $request->to;
            if($from == $to){
                $enquiries = Requirement::leftjoin('project_details','project_details.project_id','=','requirements.project_id')
                ->whereIn('project_details.sub_ward_id',$subwardid)
                ->where('requirements.generated_by',$request->initiator)
                ->where('requirements.created_at','LIKE',$from."%")
                ->where('requirements.status','!=',"Enquiry Cancelled")
                ->where('requirements.main_category','LIKE',"%".$request->category."%")
                 ->orderby('requirements.created_at','DESC')

                ->get();
            $converter = user::get();
            $totalenq = count($enquiries);
               
            }else{
            $subwardid = Subward::where('ward_id',$request->enqward)->pluck('id');
               
                $enquiries = Requirement::leftjoin('project_details','project_details.project_id','=','requirements.project_id')
                            ->whereIn('project_details.sub_ward_id',$subwardid)
                            ->where('requirements.generated_by',$request->initiator)
                            ->where('requirements.created_at','>=',$from)
                            ->where('requirements.created_at','<=',$to)
                            ->where('requirements.status','!=',"Enquiry Cancelled")
                            ->where('requirements.main_category','LIKE',"%".$request->category."%")
                            ->orderby('requirements.created_at','DESC')
                            ->get();
                $converter = user::get();
            $totalenq = count($enquiries);

            }
        }elseif($request->from && $request->to && !$request->initiator && !$request->category && $request->ward && $request->enqward){

            // from, to and ward
            if($request->ward == "All"){
            $subwardid = Subward::where('ward_id',$request->enqward)->pluck('id');    
            }else{
            $subwardid = Subward::where('id',$request->ward)->pluck('id');    
            }
            $from = $request->from;
            $to = $request->to;
            if($from == $to){
                $enquiries = Requirement::leftjoin('project_details','project_details.project_id','=','requirements.project_id')
                ->orderBy('requirements.created_at','DESC')
                ->whereIn('project_details.sub_ward_id',$subwardid)
                ->where('requirements.created_at','LIKE',$from."%")
                ->where('requirements.status','!=',"Enquiry Cancelled")
                
                ->get();
                $converter = user::get();
            $totalenq = count($enquiries);

            }else{

                $enquiries = Requirement::leftjoin('project_details','project_details.project_id','=','requirements.project_id')
                ->orderBy('requirements.created_at','DESC')
                ->whereIn('project_details.sub_ward_id',$subwardid)
                ->where('requirements.created_at','>=',$from)
                ->where('requirements.created_at','<=',$to)
                ->where('requirements.status','!=',"Enquiry Cancelled")
                

                ->get();
                $converter = user::get();
            $totalenq = count($enquiries);
                
            }
        }elseif($request->from && $request->to && $request->initiator && !$request->category && !$request->ward){
            // from, to and initiator
            $from = $request->from;
            $to = $request->to;
            if($from == $to){
                $enquiries = Requirement::orderBy('created_at','DESC')
                ->where('generated_by','=',$request->initiator)
                ->where('created_at','LIKE',$from."%")
                ->where('status','!=',"Enquiry Cancelled")
                 
                ->get();
               $converter = user::get();
            $totalenq = count($enquiries);
                
            }else{
                $enquiries = Requirement::orderBy('created_at','DESC')
                ->where('generated_by','=',$request->initiator)
                ->wheredate('created_at','>=',$from)
                      
                ->wheredate('created_at','<=',$to)
                ->where('status','!=',"Enquiry Cancelled")
                 
                ->get();
               $converter = user::get();
            $totalenq = count($enquiries);
                
            }
        }elseif($request->from && $request->to && !$request->initiator && $request->category && !$request->ward){
            // from, to and category
            $from = $request->from;
            $to = $request->to;
            if($from == $to){
                $enquiries = Requirement::orderBy('created_at','DESC')
                ->where('main_category','=',$request->category)
                ->where('created_at','LIKE',$from."%")
                ->where('status','!=',"Enquiry Cancelled")
                       
               
                ->get();
                $converter = user::get();
            $totalenq = count($enquiries);
                
            }else{
                $enquiries = Requirement::orderBy('created_at','DESC')
                ->where('main_category','=',$request->category)
                ->wheredate('created_at','>=',$from)
                ->wheredate('created_at','<=',$to)
                ->where('status','!=',"Enquiry Cancelled")
                      

                ->get();
                $converter = user::get();
            $totalenq = count($enquiries);
               
            }
        }elseif($request->from && $request->to && $request->initiator && $request->category && !$request->ward){
            // from, to, initiator and category
            $from = $request->from;
            $to = $request->to;
            if($from == $to){
                $enquiries = Requirement::orderBy('created_at','DESC')
                ->where('main_category','=',$request->category)
                ->where('generated_by','=',$request->initiator)
                ->where('created_at','LIKE',$from."%")
                ->where('status','!=',"Enquiry Cancelled")
                      
                ->get();
                $converter = user::get();
            $totalenq = count($enquiries);
                
            }else{
                $enquiries = Requirement::orderBy('created_at','DESC')
                ->where('main_category','=',$request->category)
                ->where('generated_by','=',$request->initiator)
                ->wheredate('created_at','>=',$from)
                ->wheredate('created_at','<=',$to)
                ->where('status','!=',"Enquiry Cancelled")
                      

                ->get();
                $converter = user::get();
            $totalenq = count($enquiries);

                
            }
        }elseif($request->from && $request->to && !$request->initiator && $request->category && $request->ward && $request->enqwrad){
            // from, to, wards and category
            $from = $request->from;
          if($request->ward == "All"){
            $subwardid = Subward::where('ward_id',$request->enqward)->pluck('id');    
            }else{
            $subwardid = Subward::where('id',$request->ward)->pluck('id');    
            }
            $to = $request->to;
            if($from == $to){
                $enquiries = Requirement::leftjoin('project_details','project_details.project_id','=','requirements.project_id')
                            ->orderBy('requirements.created_at','DESC')
                            ->where('requirements.main_category','=',$request->category)
                            ->whereIn('project_details.sub_ward_id',$subwardid)
                            ->where('requirements.created_at','LIKE',$from."%")
                            ->where('requirements.status','!=',"Enquiry Cancelled")
                      

                            ->get();
            $totalenq = count($enquiries);

                        $converter = user::get();
            }else{
                $enquiries = Requirement::leftjoin('project_details','project_details.project_id','=','requirements.project_id')
                            ->orderBy('requirements.created_at','DESC')
                            ->where('requirements.main_category','=',$request->category)
                            ->whereIn('project_details.sub_ward_id',$subwardid)
                            ->where('requirements.created_at','>=',$from)
                            ->where('requirements.created_at','<=',$to)
                            ->where('requirements.status','!=',"Enquiry Cancelled")
                       
                            
                            ->get();
                $converter = user::get();
            $totalenq = count($enquiries);
                }
            
        }elseif($request->from && $request->to && $request->initiator && !$request->category && $request->ward && $request->enqward){
            // from, to, wards and initiator
           if($request->ward == "All"){
            $subwardid = Subward::where('ward_id',$request->enqward)->pluck('id');    
            }else{
            $subwardid = Subward::where('id',$request->ward)->pluck('id');    
            }

            $from = $request->from;
            $to = $request->to;
            if($from == $to){
                $enquiries = Requirement::leftjoin('project_details','project_details.project_id','=','requirements.project_id')
                            ->orderBy('requirements.created_at','DESC')
                            ->where('requirements.generated_by','=',$request->initiator)
                            ->whereIn('project_details.sub_ward_id',$subwardid)
                            ->where('requirements.created_at','LIKE',$from."%")
                            ->where('requirements.status','!=',"Enquiry Cancelled")
                            ->select('requirements.*','project_details.sub_ward_id')
                       
                            ->get();
            $totalenq = count($enquiries);
                
            }else{
                $enquiries = Requirement::leftjoin('project_details','project_details.project_id','=','requirements.project_id')
                            ->orderBy('requirements.created_at','DESC')
                            ->where('requirements.generated_by','=',$request->initiator)
                            ->whereIn('project_details.sub_ward_id',$subwardid)
                            ->where('requirements.created_at','>=',$from)
                            ->where('requirements.created_at','<=',$to)
                            ->where('requirements.status','!=',"Enquiry Cancelled")
                      

                            ->get();
            $totalenq = count($enquiries);
                
            }
        }elseif(!$request->from && !$request->to && $request->initiator && $request->category && !$request->ward){
            //initiator and category
            $from = $request->from; 
            $to = $request->to;
            $enquiries = Requirement::where('main_category','=',$request->category)
                        ->where('generated_by','=',$request->initiator)
                        ->where('status','!=',"Enquiry Cancelled")
                       ->orderby('created_at','DESC')

                        ->get();
            $totalenq = count($enquiries);
            
        }elseif($request->manu){
                         if($request->manu != "manu"){
                            $enquiries = Requirement::where('manu_id','!=',NULL)
                                        ->where('status','like','%'.$request->manu)
                                        ->orderby('created_at','DESC')
                                        ->select('requirements.*')
                                        ->get();
                           $converter = user::get();
                        $totalenq = count($enquiries);
                            }
                        else{
                           
                             $enquiries = Requirement::where('manu_id','!=',NULL)
                                           ->where('status','!=',"Enquiry Cancelled")
                                           ->orderby('created_at','DESC')
                                           ->get();
                                $converter = user::get();
                                $totalenq = count($enquiries);

                            }
                        }
          elseif($request->enqward && !$request->category  && !$request->from && !$request->to && !$request->initiator && !$request->ward){
           // only ward
          $wardtotal = Subward::where('ward_id',$request->enqward)->pluck('id');
          $pro = ProjectDetails::whereIn('sub_ward_id',$wardtotal )->pluck('project_id');

         $enquiries = Requirement::whereIn('project_id',$pro)
                        ->where('status','!=',"Enquiry Cancelled")
                       ->orderby('created_at','DESC')
                        ->get();
                       
            $converter = user::get();
            $totalenq = count($enquiries);
        }
        elseif($request->category && $request->enqward && !$request->from && !$request->to && !$request->initiator && !$request->ward){
          
            // ward and category
            $subwardid = Subward::where('ward_id',$request->enqward)->pluck('id');
            $enquiries = Requirement::leftjoin('project_details','project_details.project_id','=','requirements.project_id')
                        ->whereIn('project_details.sub_ward_id',$subwardid)
                        ->where('requirements.status','!=',"Enquiry Cancelled")
                        ->where('main_category',$request->category)
                        ->where('status','!=',"Enquiry Cancelled")
                        ->orderby('requirements.created_at','DESC')
                        ->get();
                        
            $converter = user::get();
            $totalenq = count($enquiries);

        }
        else{
            // no selection
            // $enquiries = Cache::remember('')
              if(!$request->yup){
              $yup = 100;
                
              }else{
                $yup =$request->yup;
              }

            $enquiries = Requirement::where('status','!=',"Enquiry Cancelled")
                       ->orderby('created_at','DESC')
                       ->where('manu_id',NULL) 
                       ->limit($yup)->get();
                       
            $enquiries1 = Requirement::where('status','!=',"Enquiry Cancelled")
                       ->orderby('created_at','DESC')
                       ->get();
            $converter = user::get();
            $totalenq = count($enquiries1);


         
            }
        $projectOrdersReceived = Order::whereIn('status',["Order Confirmed","Order Cancelled"])->pluck('project_id')->toArray();
        return view('enquirysheet',[
            'totalenq' =>$totalenq,
            'totalofenquiry'=>$totalofenquiry,
            'enquiries'=>$enquiries,
            'wardwise'=>$wardwise,
            'category'=>$category,
            'initiators'=>$initiators,
            'wards'=>$wards,
            'projectOrdersReceived'=>$projectOrdersReceived,
            'mainward'=>$ward,
            
        ]);
    }



 public function enquirysheet(Request $request)
    {
     if(Auth::user()->group_id != 22 ){
       return  $this->enquirysheet1($request);
     }   
       $s = Tlwards::where('user_id',Auth::user()->id)->pluck('ward_id')->first();
       $etl = explode(",",$s);
       $wardwise =Ward::whereIn('id',$etl)->get();

        $wardss = Tlwards::where('user_id',Auth::user()->id)->pluck('ward_id')->first();
         $tlward = explode(",",$wardss);
         $totalofenquiry = "";
        $totalenq = "";
        $converter = user::get();
        $ward = Ward::get();
        $wards = SubWard::orderby('sub_ward_name','ASC')->whereIn('ward_id',$tlward)->get();
        $sub = SubWard::whereIn('ward_id',$tlward)->pluck('id');
        $pids = ProjectDetails::whereIn('sub_ward_id',$sub)->pluck('project_id');
        $this->variable=$pids;

        $category = Category::all();
        $depart = [1,6,2,7,8,11,15,16,17,22];
        $initiators = User::whereIn('group_id',$depart)->where('department_id','!=',10)->get();
        $subwards2 = array();


        if($request->status && !$request->category){
            if($request->status != "all"){
               $tlward = Tlwards::where('user_id',Auth::user()->id)->pluck('ward_id')->first();
                $enquiries = Requirement::whereIn('project_id',$pids)
                            ->where('status','like','%'.$request->status)
                            ->where('status','!=',"Enquiry Cancelled")
                 ->orderby('created_at','DESC')
                            
                            ->get();

                       $enquiries = Response::Json( $enquiries);

            $totalenq = count($enquiries);
                      


               
            }else{

                $enquiries = Requirement::whereIn('project_id',$pids)
                            ->where('status','!=',"Enquiry Cancelled")
                 ->orderby('created_at','DESC')
                           
                            ->get();
                             $enquiries = Response::Json( $enquiries);
            $totalenq = count($enquiries);
               
            }
        }elseif($request->status && $request->category){

            if($request->status != "all"){

                $enquiries = Requirement::whereIn('project_id',$pids)
                            ->where('status','like','%'.$request->status)
                            ->where('main_category',$request->category)
                            ->where('status','!=',"Enquiry Cancelled")
                 ->orderby('created_at','DESC')

                            ->get();
            $totalenq = count($enquiries);
                
            }else{

                $enquiries = Requirement::whereIn('project_id',$pids)
                            ->where('main_category',$request->category)
                            ->where('status','!=',"Enquiry Cancelled")
                 ->orderby('created_at','DESC')
                           
                            ->get();
            $totalenq = count($enquiries);
               
            }
        }elseif($request->from && $request->to  && !$request->initiator && !$request->category && !$request->ward){
            // only from and to
            $from = $request->from;
            $to = $request->to;


            if($from == $to){
                $enquiries = Requirement::whereIn('project_id',$pids)
                            ->orderBy('created_at','DESC')
                            ->where('created_at','LIKE',$from."%")
                            ->where('status','!=',"Enquiry Cancelled")
                 
                            ->get();
           
            $totalenq = count($enquiries);

            }
            else{
                $enquiries = Requirement::whereIn('project_id',$pids)
                            ->orderBy('created_at','DESC')
                            ->wheredate('created_at','>=',$from)
                            ->wheredate('created_at','<=',$to)
                            ->where('status','!=',"Enquiry Cancelled")
                 
                            ->get();
            $totalenq = count($enquiries);

       
            }
            

        }elseif(!$request->from && !$request->to && !$request->initiator && !$request->category && $request->ward && $request->enqward){
            // only ward
           if($request->ward == "All"){
            $subwardid = Subward::where('ward_id',$request->enqward)->pluck('id');    
            }else{
            $subwardid = Subward::where('id',$request->ward)->pluck('id');    
            }


            $enquiries = Requirement::whereIn('requirements.project_id',$pids)
                        ->leftjoin('project_details','project_details.project_id','=','requirements.project_id')
                        ->whereIn('project_details.sub_ward_id',$subwardid)
                        ->where('requirements.status','!=',"Enquiry Cancelled")
                 ->orderby('project_details.created_at','DESC')

                        ->get();
            $totalenq = count($enquiries);
           
        }elseif(!$request->from && !$request->to && !$request->initiator && $request->category && !$request->ward){
            // only category
            $enquiries = Requirement::whereIn('project_id',$pids)
                        ->where('main_category',$request->category)
                        ->where('status','!=',"Enquiry Cancelled")
                 ->orderby('created_at','DESC')
                        
                        ->get();


            $totalenq = count($enquiries);
          

            $totalofenquiry = Requirement::where('main_category',$request->category)->where('requirements.status','!=',"Enquiry Cancelled")->sum('quantity');


            
        }elseif(!$request->from && !$request->to && $request->initiator && !$request->category && !$request->ward){
            // only initiator
            $enquiries = Requirement::whereIn('project_id',$pids)
                        ->where('generated_by',$request->initiator)
                        ->where('status','!=',"Enquiry Cancelled")
                 ->orderby('created_at','DESC')

                        ->get();
            $totalenq = count($enquiries);
           
        }elseif($request->from && $request->to && $request->initiator && $request->category && $request->ward && $request->enqward){
            // everything
            $from = $request->from;
            $to = $request->to;
            if($request->ward == "All"){
            $subwardid = Subward::where('ward_id',$request->enqward)->pluck('id');    
            }else{
            $subwardid = Subward::where('id',$request->ward)->pluck('id');    
            }
            if($from == $to){
                $enquiries = Requirement::whereIn('requirements.project_id',$pids)
                ->leftjoin('project_details','project_details.project_id','=','requirements.project_id')
                 ->orderBy('requirements.created_at','DESC')
                ->whereIn('project_details.sub_ward_id',$subwardid)
                ->where('requirements.generated_by',$request->initiator)
                ->where('requirements.created_at','LIKE',$from."%")
                ->where('requirements.status','!=',"Enquiry Cancelled")
                ->where('requirements.main_category','LIKE',"%".$request->category."%")
                ->get();
            $totalenq = count($enquiries);
          
            }else{
                $enquiries = Requirement::whereIn('requirements.project_id',$pids)
                            ->leftjoin('project_details','project_details.project_id','=','requirements.project_id')
                            ->orderBy('requirements.created_at','DESC')
                            ->whereIn('project_details.sub_ward_id',$subwardid)
                            ->where('requirements.generated_by',$request->initiator)
                            ->where('requirements.created_at','>=',$from)
                            ->where('requirements.created_at','<=',$to)
                            ->where('requirements.status','!=',"Enquiry Cancelled")
                            ->where('requirements.main_category','LIKE',"%".$request->category."%")
                 

                            ->get();
            $totalenq = count($enquiries);

            }
        }elseif($request->from && $request->to && !$request->initiator && !$request->category && $request->ward && $request->enqward){
            // from, to and ward
            if($request->ward == "All"){
            $subwardid = Subward::where('ward_id',$request->enqward)->pluck('id');    
            }else{
            $subwardid = Subward::where('id',$request->ward)->pluck('id');    
            }


            $from = $request->from;
            $to = $request->to;
            if($from == $to){
                $enquiries = Requirement::whereIn('requirements.project_id',$pids)
                ->leftjoin('project_details','project_details.project_id','=','requirements.project_id')
                ->orderBy('requirements.created_at','DESC')
                ->whereIn('project_details.sub_ward_id',$subwardid)
                ->where('requirements.created_at','LIKE',$from."%")
                ->where('requirements.status','!=',"Enquiry Cancelled")
                 
                ->get();
            $totalenq = count($enquiries);
                                  
            }else{
                $enquiries = Requirement::whereIn('requirements.project_id',$pids)
                ->leftjoin('project_details','project_details.project_id','=','requirements.project_id')
                ->orderBy('requirements.created_at','DESC')
                ->whereIn('project_details.sub_ward_id',$subwardid)
                ->where('requirements.created_at','>=',$from)
                ->where('requirements.created_at','<=',$to)
                ->where('requirements.status','!=',"Enquiry Cancelled")
             
                
                ->get();
            $totalenq = count($enquiries);
               
            }
        }elseif($request->from && $request->to && $request->initiator && !$request->category && !$request->ward){
            // from, to and initiator
            $from = $request->from;
            $to = $request->to;
            if($from == $to){
                $enquiries = Requirement::whereIn('project_id',$pids)
                ->orderBy('created_at','DESC')
                ->where('generated_by','=',$request->initiator)
                ->where('created_at','LIKE',$from."%")
                ->where('status','!=',"Enquiry Cancelled")
            
               
                ->get();
            $totalenq = count($enquiries);
               
            }else{
                $enquiries = Requirement::whereIn('project_id',$pids)
                ->orderBy('created_at','DESC')
                ->where('generated_by','=',$request->initiator)
                ->wheredate('created_at','>=',$from)
                ->wheredate('created_at','<=',$to)
                ->where('status','!=',"Enquiry Cancelled")
                
               
                ->get();
            $totalenq = count($enquiries);
              
            }
        }elseif($request->from && $request->to && !$request->initiator && $request->category && !$request->ward){
            // from, to and category
            $from = $request->from;
            $to = $request->to;
            if($from == $to){

                $enquiries = Requirement::whereIn('project_id',$pids)
                ->orderBy('created_at','DESC')
                ->where('main_category','=',$request->category)
                ->where('created_at','LIKE',$from."%")
                ->where('status','!=',"Enquiry Cancelled")
            

                ->get();
            $totalenq = count($enquiries);
               
            }else{
                $enquiries = Requirement::whereIn('project_id',$pids)
                ->orderBy('created_at','DESC')
                ->where('main_category','=',$request->category)
                ->wheredate('created_at','>=',$from)
                ->wheredate('created_at','<=',$to)
                ->where('status','!=',"Enquiry Cancelled")
                
              
                ->get();
            $totalenq = count($enquiries);
                
            }
        }elseif($request->from && $request->to && $request->initiator && $request->category && !$request->ward){
            // from, to, initiator and category
            $from = $request->from;
            $to = $request->to;
            if($from == $to){
                $enquiries = Requirement::whereIn('project_id',$pids)
                ->orderBy('created_at','DESC')
                ->where('main_category','=',$request->category)
                ->where('generated_by','=',$request->initiator)
                ->where('created_at','LIKE',$from."%")
                ->where('status','!=',"Enquiry Cancelled")
                

                ->get();
            $totalenq = count($enquiries);
                
            }else{
                $enquiries = Requirement::whereIn('project_id',$pids)
                ->orderBy('created_at','DESC')
                ->where('main_category','=',$request->category)
                ->where('generated_by','=',$request->initiator)
                ->wheredate('created_at','>=',$from)
                ->wheredate('created_at','<=',$to)
                ->where('status','!=',"Enquiry Cancelled")
                
                
                ->get();
            $totalenq = count($enquiries);
                
            }
        }elseif($request->from && $request->to && !$request->initiator && $request->category && $request->ward && $request->enqward){
            // from, to, wards and category
            if($request->ward == "All"){
            $subwardid = Subward::where('ward_id',$request->enqward)->pluck('id');    
            }else{
            $subwardid = Subward::where('id',$request->ward)->pluck('id');    
            }


            $from = $request->from;
            $to = $request->to;
            if($from == $to){
                $enquiries = Requirement::whereIn('requirements.project_id',$pids)
                            ->leftjoin('project_details','project_details.project_id','=','requirements.project_id')
                             ->orderBy('requirements.created_at','DESC')
                            ->where('requirements.main_category','=',$request->category)
                            ->whereIn('project_details.sub_ward_id',$subwardid)
                            ->where('requirements.created_at','LIKE',$from."%")
                            ->where('requirements.status','!=',"Enquiry Cancelled")
                 

                            ->get();
            $totalenq = count($enquiries);
                       
            }else{
                $enquiries = Requirement::whereIn('requirements.project_id',$pids)
                            ->leftjoin('project_details','project_details.project_id','=','requirements.project_id')
                            ->orderBy('requirements.created_at','DESC')
                            ->where('requirements.main_category','=',$request->category)
                            ->whereIn('project_details.sub_ward_id',$subwardid)
                            ->where('requirements.created_at','>=',$from)
                            ->where('requirements.created_at','<=',$to)
                            ->where('requirements.status','!=',"Enquiry Cancelled")
                 

                             ->get();
            $totalenq = count($enquiries);
              
            }
        }elseif($request->from && $request->to && $request->initiator && !$request->category && $request->ward && $request->enqward){
            // from, to, wards and initiator
            $from = $request->from;
            if($request->ward == "All"){
            $subwardid = Subward::where('ward_id',$request->enqward)->pluck('id');    
            }else{
            $subwardid = Subward::where('id',$request->ward)->pluck('id');    
            }

            $to = $request->to;
            if($from == $to){
                $enquiries = Requirement::whereIn('requirements.project_id',$pids)
                            ->leftjoin('project_details','project_details.project_id','=','requirements.project_id')
                            ->orderBy('requirements.created_at','DESC')
                            ->where('requirements.generated_by','=',$request->initiator)
                            ->whereIn('project_details.sub_ward_id',$subwardid)
                            ->where('requirements.created_at','LIKE',$from."%")
                            ->where('requirements.status','!=',"Enquiry Cancelled")
                
                            
                            ->get();
            $totalenq = count($enquiries);
                
            }else{
                $enquiries = Requirement::whereIn('requirements.project_id',$pids)
                            ->leftjoin('project_details','project_details.project_id','=','requirements.project_id')
                            ->orderBy('requirements.created_at','DESC')
                            ->where('requirements.generated_by','=',$request->initiator)
                            ->whereIn('project_details.sub_ward_id',$subwardid)
                            ->where('requirements.created_at','>=',$from)
                            ->where('requirements.created_at','<=',$to)
                            ->where('requirements.status','!=',"Enquiry Cancelled")
               

                            ->get();
            $totalenq = count($enquiries);
                
            }
        }elseif(!$request->from && !$request->to && $request->initiator && $request->category && !$request->ward){
            //initiator and category
            $from = $request->from;
            $to = $request->to;
            $enquiries = Requirement::whereIn('project_id',$pids)
            
                        ->where('main_category','=',$request->category)
                        ->where('generated_by','=',$request->initiator)
                        ->where('status','!=',"Enquiry Cancelled")
                 ->orderby('created_at','DESC')


                        ->get();
            $totalenq = count($enquiries);
            
        }

        elseif($request->manu){
         $enquiries = Requirement::where('manu_id','!=',NULL)
                       ->where('requirements.status','!=',"Enquiry Cancelled")
                       ->orderby('created_at','DESC')
                        ->get();
            $converter = user::get();
            $totalenq = count($enquiries);

        }

        else{
            
            $enquiries = Requirement::whereIn('project_id',$pids)
                        ->where('requirements.status','!=',"Enquiry Cancelled")
                 ->orderby('created_at','DESC')
                        
                        ->get();
         

          
            $totalenq = count($enquiries);
            
        }

        $filtered = new Collection;
        $projectOrdersReceived = Order::whereIn('status',["Order Confirmed","Order Cancelled"])->pluck('project_id')->toArray();

            $wardf = Tlwards::where('user_id',Auth::user()->id)->pluck('ward_id')->first();
            $tlwardf = explode(",",$wardf);
            $wardsss = SubWard::orderby('sub_ward_name','ASC')->whereIn('ward_id',$tlwardf)->pluck('id');

           $pp = ProjectDetails::where('sub_ward_id',$wardsss)->pluck('project_id');

            $r = Requirement::whereIn('project_id',$pp)->pluck('id');


    $totalenq = count($enquiries);

        return view('enquirysheet',[
            'totalenq' =>$totalenq,
            'totalofenquiry'=>$totalofenquiry,
            'subwards2'=>$subwards2,
            'enquiries'=>$enquiries,
            'wards'=>$wards,
            'category'=>$category,
            'initiators'=>$initiators,
            'mainward'=>$ward,
            'projectOrdersReceived'=>$projectOrdersReceived,'totalenq'=>$totalenq,'wardwise'=>$wardwise
        ]);
    }

 public function enquiryCancell(Request $request)
    {
        if(Auth::user()->group_id == 22)
       {
        return $this->enquiryCancell1($request);
       }
       
        $cancelcount = 0;
        $wards = SubWard::orderby('sub_ward_name','ASC')->get();
        $category = Category::all();
        $depart = [6,7,2];
        $initiators = User::whereIn('group_id',$depart)->where('department_id','!=',10)->get();
        $subwards2 = array();
         if($request->project == "project"){

        $enquiries = Requirement::where('status',"Enquiry Cancelled")
                        ->where('manu_id',NULL)->paginate("20");
         }
       else{

        $enquiries = Requirement::where('status',"Enquiry Cancelled")
                        ->where('manu_id','!=',NULL)->paginate("20");
       }
                     
             
        $cancelcount = count( $enquiries);
            // foreach($enquiries as $enquiry){
            //     $subwards2[$enquiry->project != null ?$enquiry->project->project_id : ''] = SubWard::where('id',$enquiry->sub_ward_id)->pluck('sub_ward_name')->first();
            // }
            //  $tlward = Tlwards::where('user_id',Auth::user()->id)->pluck('ward_id')->first();
            // $wardss = SubWard::orderby('sub_ward_name','ASC')->where('ward_id',$tlward)->pluck('id')->first;
            // $pp = ProjectDetails::where('sub_ward_id',$wardss)->pluck('project_id');

       
       
        return view('enquiryCancell',[
            'cancelcount' =>$cancelcount,
            'subwards2'=>$subwards2,
            'enquiries'=>$enquiries,
            'wards'=>$wards,
            'category'=>$category,
            'initiators'=>$initiators
        ]);
        
       
    }


public function enquiryCancells(Request $request){

     
        $r=$request->eid;
   
     $u=Requirement::where('id',$request->eid)->update(['status'=>"Enquiry Cancelled",'remark'=>$request->remark]);

     return back()->with("Successfully Cancelled The Enquiry ,  Thank You !");


}




 public function enquiryCancell1(Request $request)
    {
        $tl= Tlwards::where('user_id',Auth::user()->id)->pluck('ward_id')->first();
        $tlward =explode(",",$tl);
        $cancelcount = 0;
        $wards = SubWard::orderby('sub_ward_name','ASC')->get();
        $category = Category::all();
        $depart = [6,7,2];
        $initiators = User::whereIn('group_id',$depart)->where('department_id','!=',10)->get();
        $subwards2 = array();
        $enquiries = Requirement::leftjoin('users','users.id','=','requirements.generated_by')
                    ->leftjoin('procurement_details','procurement_details.project_id','=','requirements.project_id')
                    ->leftjoin('project_details','project_details.project_id','=','requirements.project_id')
                    ->leftjoin('sub_wards','sub_wards.id','project_details.sub_ward_id')
                    ->leftjoin('wards','wards.id','sub_wards.ward_id')
                    ->whereIn('wards.id',$tlward)
                    ->select('requirements.*','procurement_details.procurement_name','procurement_details.procurement_contact_no','procurement_details.procurement_email','users.name','project_details.sub_ward_id')
                    ->where('requirements.status',"Enquiry Cancelled")
                    ->get();

        $cancelcount = count( $enquiries);
            foreach($enquiries as $enquiry){
                $subwards2[$enquiry->project_id] = SubWard::where('id',$enquiry->sub_ward_id)->pluck('sub_ward_name')->first();
            }

        return view('enquiryCancell',[
            'cancelcount' =>$cancelcount,
            'subwards2'=>$subwards2,
            'enquiries'=>$enquiries,
            'wards'=>$wards,
            'category'=>$category,
            'initiators'=>$initiators
        ]);
    }
    public function myenquirysheet()
    {
        $wards = SubWard::orderby('sub_ward_name','ASC')->get();
        $category = Category::all();
        $depart = [6,7,2];
        $initiators = User::whereIn('group_id',$depart)->where('department_id','!=',10)->get();
        $subwards2 = array();
        $enquiries = Requirement::leftjoin('users','users.id','=','requirements.generated_by')
                    ->leftjoin('procurement_details','procurement_details.project_id','=','requirements.project_id')
                    ->leftjoin('project_details','project_details.project_id','=','requirements.project_id')
                    ->select('requirements.*','procurement_details.procurement_name','procurement_details.procurement_contact_no','procurement_details.procurement_email','users.name','project_details.sub_ward_id')
                    ->where('requirements.generated_by',Auth::user()->id)
                    ->get();
        foreach($enquiries as $enquiry){
            $subwards2[$enquiry->project_id] = SubWard::where('id',$enquiry->sub_ward_id)->pluck('sub_ward_name')->first();
        }

        return view('enquirysheet',[
            'subwards2'=>$subwards2,
            'enquiries'=>$enquiries,
            'wards'=>$wards,
            'category'=>$category,
            'initiators'=>$initiators
        ]);
    }
    public function editEnq(Request $request)
    {

        $category = Category::all();
        $depart = [2,4,6,7,8,17];
        $users = User::whereIn('group_id',$depart)->where('department_id','!=',10)->get();
        $enq = Requirement::where('requirements.id',$request->reqId)
                    ->leftjoin('users','users.id','=','requirements.generated_by')
                    ->leftjoin('project_details','project_details.project_id','=','requirements.project_id')
                    ->leftjoin('procurement_details','requirements.project_id','=','procurement_details.procurement_contact_no')
                    ->leftjoin('contractor_details','requirements.project_id','contractor_details.project_id')
                    ->leftjoin('owner_details','requirements.project_id','owner_details.project_id')
                    ->leftjoin('site_engineer_details','requirements.project_id','site_engineer_details.project_id')
                    ->leftjoin('consultant_details','requirements.project_id','consultant_details.project_id')
                    ->leftjoin('site_addresses','requirements.project_id','=','site_addresses.project_id')
                    ->select('requirements.*','users.name','project_details.project_name','procurement_details.procurement_contact_no','site_addresses.address','contractor_details.contractor_contact_no','owner_details.owner_contact_no','site_engineer_details.site_engineer_contact_no','consultant_details.consultant_contact_no','requirements.id')
                    ->first();

        return view('editEnq',['enq'=>$enq,'category'=>$category,'users'=>$users]);
    }
    public function editEnq1(Request $request)
    {

        $states = State::all();
        $category = Category::where('category_name','!=',"STEEL")->get();
        $steel = Category::where('category_name','STEEL')->get();
        $depart = [7,1];
       $users = User::whereIn('group_id',$depart)->where('department_id','!=',10)->where('name',Auth::user()->name)->get();
        $depart1 = [6,7];
       $users1 = User::whereIn('group_id',$depart1)->where('department_id','!=',10)->where('name',Auth::user()->name)->get();
        $depart2 = [2,4,6,7,8,17,11,10,1];
        $users2 = User::whereIn('group_id',$depart2)->get();

        $enq = Requirement::where('requirements.id',$request->reqId)
                    ->leftjoin('users','users.id','=','requirements.generated_by')
                    ->leftjoin('project_details','project_details.project_id','=','requirements.project_id')
                    ->leftjoin('procurement_details','requirements.project_id','=','procurement_details.project_id')
                    ->leftjoin('contractor_details','requirements.project_id','contractor_details.project_id')
                    ->leftjoin('owner_details','requirements.project_id','owner_details.project_id')
                    ->leftjoin('site_engineer_details','requirements.project_id','site_engineer_details.project_id')
                    ->leftjoin('consultant_details','requirements.project_id','consultant_details.project_id')
                    ->leftjoin('site_addresses','requirements.project_id','=','site_addresses.project_id')
                    ->select('requirements.*','users.name','project_details.project_name','procurement_details.procurement_contact_no','site_addresses.address','contractor_details.contractor_contact_no','owner_details.owner_contact_no','site_engineer_details.site_engineer_contact_no','consultant_details.consultant_contact_no')
                    ->first();
                  
        return view('editEnq1',['enq'=>$enq,'category'=>$category,'users'=>$users,'users1'=>$users1,'users2'=>$users2,'states'=>$states,'steel'=>$steel]);
    }
    public function eqpipelineedit(Request $request)
    {
        $category = Category::all();
        $depart = [2,4,6,7,8,17];
        $users = User::whereIn('group_id',$depart)->where('department_id','!=',10)->get();
        $enq = Requirement::where('requirements.id',$request->reqId)
                    ->leftjoin('users','users.id','=','requirements.generated_by')
                    ->leftjoin('project_details','project_details.project_id','=','requirements.project_id')
                    ->leftjoin('procurement_details','requirements.project_id','=','procurement_details.procurement_contact_no')
                    ->leftjoin('contractor_details','requirements.project_id','contractor_details.project_id')
                    ->leftjoin('owner_details','requirements.project_id','owner_details.project_id')
                    ->leftjoin('site_engineer_details','requirements.project_id','site_engineer_details.project_id')
                    ->leftjoin('consultant_details','requirements.project_id','consultant_details.project_id')
                    ->leftjoin('site_addresses','requirements.project_id','=','site_addresses.project_id')
                    ->select('requirements.*','users.name','project_details.project_name','procurement_details.procurement_contact_no','site_addresses.address','contractor_details.contractor_contact_no','owner_details.owner_contact_no','site_engineer_details.site_engineer_contact_no','consultant_details.consultant_contact_no')
                    ->first();
        return view('editEnq',['enq'=>$enq,'category'=>$category,'users'=>$users]);
    }



    // public function index1(Request $request )
    // {



    //     $check =DB::table('stages')->where('list',Auth::user()->name)
    //                 ->orderby('created_at','DESC')->pluck('status');

    //     $count = count($check);
    //     $ss = ProjectDetails::pluck('project_status');

    //      $cc = explode("," , $ss);

    //     $projects = ProjectDetails::where($cc ,'LIKE' ,$check)->get();

    //      dd($projects);

    //     $totalListing = ProjectDetails::where('project_status',$check)->count();

    //     return view('status_wise_projects', ['projects' => $projects, 'totalListing'=>$totalListing,'status'=>$check ,'stages'=>$stages]);
    //    }

       public function datewise(Request $request )
       {
            $assigndate =AssignStage::where('user_id',Auth::user()->id)
                           ->orderby('created_at','DESC')->pluck('assigndate')->first();
            $check =DB::table('assignstage','user_id',Auth::user()->id)->pluck('stage');
            $projects =ProjectDetails::where('project_details.created_at','like',$assigndate."%")
                ->whereOr('project_details.project_status','asssign_satge')
                ->leftjoin('users','users.id','=','project_details.listing_engineer_id')
                 ->whereOr('stage' , $check)
               ->leftjoin('assignstage', 'project_details.sub_ward_id',  'assignstage.sub_id')
               ->select('project_details.*')
               ->paginate(15);

            $totalListing = ProjectDetails::where('created_at','LIKE',$assigndate."%")->count();

           return view('date_wise_project',['projects' => $projects,'assigndate'=>$assigndate,'totalListing'=>$totalListing ]);
          }

    public function index(request $request)
    {


        if(Auth::user()->confirmation == 0){
            return view('companypolicy');
        }
        $group = Group::where('id',Auth::user()->group_id)->pluck('group_name')->first();

        $dept = Department::where('id',Auth::user()->department_id)->pluck('dept_name')->first();
        $users = User::where('department_id','!=',0)->paginate(10);
        $departments = Department::all();
        if($group == "Team Lead" && $dept == "Operation"){

            return redirect('teamLead');
        }else if($group == "Team Leader" && $dept == "Operation"){
            return redirect('teamLead');
        }
        else if($group == "Listing Engineer" && $dept == "Operation"){
            return redirect('leDashboard');
        }else if($group == "Team Lead" && $dept == "Sales"){
            return redirect('salesTL');
        }else if($group == "Sales Engineer" && $dept == "Sales"){
            return redirect('salesEngineer');
        }else if($dept == "Human Resource"){
            return redirect('amdashboard');
        }else if($group == "Logistic Co-ordinator (Sales)"){
            return redirect('lcodashboard');
        }else if($group == "Account Executive"){
            return redirect('accountExecutive');
        }else if($group == "Asst.Manager" && $dept == "Operation"){
            return redirect('teamleads');
        }else if($group == "Asst. Manager" && $dept == "Sales"){
            return redirect('teamleads');
        }


        else if($group == "Admin"){
        $groups = Group::where('group_name','!=','Admin')->get();
        $loggedInUsers = FieldLogin::where('logindate',date('Y-m-d'))
                        ->join('users','field_login.user_id','users.id')
                        ->where('users.department_id','!=',0)
                        ->select('users.name','field_login.*','users.group_id','users.employeeId')
                        ->get();
                       
        $leLogins = loginTime::where('logindate',date('Y-m-d'))
                        ->join('users','login_times.user_id','users.id')
                        ->select('users.name','users.employeeId','login_times.*','users.group_id')
                        ->get();
        $log =  FieldLogin::where('logindate',date('Y-m-d'))
                    ->join('users','field_login.user_id','users.id')
                    ->where('users.department_id','!=',0)->pluck('field_login.user_id');
        $dept =[1,2,3,4,5,6,7];
        $ntlogins = user::whereIn('department_id',$dept)->whereNotIn('id',$log)->
                select('users.name','users.employeeId')->get();
        $present = count($log);
        $absent = count($ntlogins);      
         $projects = ProjectDetails::where('fixdate','LIKE',date('Y-m-d'))->count();
             if($request->name){

         $sale = CategoryTarget::where('category',$request->name)->first();

          if(count($sale) == 0){
            return back()->with('error',"Seleted  Category is not Targeted please select other category");
          }
       

        
         $cates = [];
   
          $catname = Category::where('id',$sale->category)->pluck('category_name')->first();
           
          $invoice = MamahomePrice::where('category',$catname)->where('invoicedate','>=',$sale->start)->where('invoicedate','<=',$sale->end)->sum('amountwithgst');
          
           $gst = Gst::where('Category',$catname)->first();
                if($gst->cgst != NULL){

                  $gstval = ($gst->cgst + $gst->sgst);
                }else{
                  $gstval = ($gst->igst);
                }

                 $oders = MamahomePrice::where('description',$catname)->wheredate('created_at','>=',$sale->start)->wheredate('created_at','<=',$sale->end)->pluck('order_id');
           
           $sp = Supplierdetails::whereIn('order_id',$oders)->sum('totalamount');
       
           $total = $invoice - $sp;

           $tp = ($total * ($gstval/100));
            
            $bals = $total - $tp;
            $finaltp = ($sale->totalatpmount) - ($bals);
            
              $catamount = ($sale->quantity * $sale->price);
            $yet = $catamount - $invoice;
         array_push($cates,['category'=>$catname,'invoice'=>$yet,'categorytarget'=>$catamount]);

          }else{
           $sale = CategoryTarget::where('category',36)->first();

          
            $cates = [];
   
          $catname = Category::where('id',$sale->category)->pluck('category_name')->first();


           
          $invoice = MamahomePrice::where('description',$catname)->wheredate('created_at','>=',$sale->start)->wheredate('created_at','<=',$sale->end)->sum('amountwithgst');
          
           $gst = Gst::where('Category',$catname)->first();
                if($gst->cgst != NULL){

                  $gstval = ($gst->cgst + $gst->sgst);
                }else{
                  $gstval = ($gst->igst);
                }

                 $oders = MamahomePrice::where('description',$catname)->wheredate('created_at','>=',$sale->start)->wheredate('created_at','<=',$sale->end)->pluck('order_id');
           
           $sp = Supplierdetails::whereIn('order_id',$oders)->sum('totalamount');
       
           $total = $invoice - $sp;

           $tp = ($total * ($gstval/100));
            
            $bals = $total - $tp;
            $finaltp = ($sale->totalatpmount) - ($bals);
            
              $catamount = ($sale->quantity * $sale->price);
            $yet = $catamount - $invoice;
         array_push($cates,['category'=>$catname,'invoice'=>$yet,'categorytarget'=>$catamount]);

          }                  
         return view('/home',['departments'=>$departments,'users'=>$users,'groups'=>$groups,'loggedInUsers'=>$loggedInUsers,'leLogins'=>$leLogins,'present'=>$present,'absent'=>$absent,'ntlogins'=>$ntlogins,'projects'=>$projects,'cates'=>$cates]);  
        }else if($group == "Sales Converter" && $dept == "Sales"){
            return redirect('scdashboard');
        }else if($group == "Marketing Exective" && $dept == "Marketing"){
            return redirect('marketingdashboard');
        }else if(Auth::user()->department_id == 10){
            Auth()->logout();
            return view('errors.403error');
        }else if($group == "Auditor"){
            return redirect('auditor');
        }else if($dept == 'IT'){
            return redirect('itdashboard');
        }else if($dept == 'Research and Development'){
            return redirect('RandDdashboard');
        }else if($group == 'Sales Officer'){
             return redirect('salesofficer');
        }else if($group == 'Finance'){
            return redirect('financeIndex');
        }else{
            return redirect('chat');
        }
          
        


       
       
        return view('/home',['departments'=>$departments,'users'=>$users,'groups'=>$groups]);
    }
    public function amDept()
    {
        $users = User::where('department_id','!=',0)->paginate(10);
        $departments = Department::all();
        $groups = Group::where('group_name','!=','Admin')->get();
        return view('depdesign',['departments'=>$departments,'users'=>$users,'groups'=>$groups]);
    }
   public function quality()
    {
    
        $closed = ProjectDetails::where('project_status','LIKE',"%Closed%")->pluck('project_id');
        $genuine = ProjectDetails::where('quality',"GENUINE")->whereNotIn('project_id',$closed)->count();
        
        
        $fake = ProjectDetails::where('quality',"FAKE")->count();
        
        $notConfirmed = ProjectDetails::where('quality',"Unverified")->whereNotIn('project_id',$closed)->where('quality','!=',"FAKE")->count();
        
        $le = User::where('group_id','6')->get();
        $notes = ProjectDetails::groupBy('with_cont')
                    ->where('with_cont','!=',"DUPLICATE NUMBER")
                    ->where('with_cont','!=',"FINISHING")
                    ->where('with_cont','!=',"NOT INTERESTED")
                    ->where('with_cont','!=',"PROJECT CLOSED")
                    ->where('with_cont','!=',"THEY HAVE REGULAR SUPPLIERS")
                    ->where('with_cont','!=',"WRONG NO")
                    ->pluck('with_cont');
        $count = array();
        foreach($notes as $note){
            $count[$note] = ProjectDetails::where('with_cont',$note)->count();
        }

        $projects = ProjectDetails::join('users','users.id','=','project_details.listing_engineer_id')->orderBy('project_details.created_at','DESC')->get();
        return view('Qualityproj', ['notes'=>$notes,'count'=>$count,'le' => $le, 'projects' => $projects,'genuine'=>$genuine,'fake'=>$fake,'notConfirmed'=>$notConfirmed,'closed'=>$closed]);
    }
    public function getquality(Request $request)
    {
        $id = $request->id;
        $quality = $request->quality;
        $date1 = $request->date1;
        $date2 = $request->date2;
        $records = array();
        if($date1 == $date2)
        {
            $date1 .= " 00:00:00";
            $date2 .= " 23:59:59";
            if($quality == 'ALL')
            {
                if($id == 'ALL'){
                    $records[0] = ProjectDetails::join('sub_wards','project_details.sub_ward_id','=','sub_wards.id')
                    ->join('users','users.id','=','project_details.listing_engineer_id')
                    ->where('project_details.created_at','>',$date1)
                    ->where('project_details.created_at','<',$date2)
                    ->select('project_details.project_id','sub_wards.sub_ward_name','project_details.created_at','project_details.contract')
                    ->get();
                    $records[2] = count($records[0]);
                }else{
                    $records[0] = ProjectDetails::join('sub_wards','project_details.sub_ward_id','=','sub_wards.id')
                    ->join('users','users.id','=','project_details.listing_engineer_id')
                    ->where('users.id',$id)
                    ->where('project_details.created_at','>',$date1)
                    ->where('project_details.created_at','<',$date2)
                    ->select('project_details.project_id','sub_wards.sub_ward_name','project_details.created_at','project_details.contract')
                    ->get();
                    $records[2] = count($records[0]);
                }
            }
            else
            {
                if($id == 'ALL'){
                    $records[0] = ProjectDetails::join('sub_wards','project_details.sub_ward_id','=','sub_wards.id')
                    ->join('users','users.id','=','project_details.listing_engineer_id')
                    ->where('project_details.created_at','>',$date1)
                    ->where('project_details.created_at','<',$date2)
                    ->where('quality',$quality)
                    ->select('project_details.project_id','sub_wards.sub_ward_name','project_details.created_at','project_details.contract')
                    ->get();
                    $records[2] = count($records[0]);
                }else{
                    $records[0] = ProjectDetails::join('sub_wards','project_details.sub_ward_id','=','sub_wards.id')
                    ->join('users','users.id','=','project_details.listing_engineer_id')
                    ->where('users.id',$id)
                    ->where('project_details.created_at','>',$date1)
                    ->where('project_details.created_at','<',$date2)
                    ->where('quality',$quality)
                    ->select('project_details.project_id','sub_wards.sub_ward_name','project_details.created_at','project_details.contract')
                    ->get();
                    $records[2] = count($records[0]);
                }
            }

        }
        else
        {
            $date1 .= " 00:00:00";
            $date2 .= " 23:59:59";
            if($quality == 'ALL')
            {
                if($id == 'ALL'){
                    $records[0] = ProjectDetails::join('sub_wards','project_details.sub_ward_id','=','sub_wards.id')
                    ->join('users','users.id','=','project_details.listing_engineer_id')
                    // ->where('users.id',$id)
                    ->where('project_details.created_at','>',$date1)
                    ->where('project_details.created_at','<',$date2)
                    ->select('project_details.project_id','sub_wards.sub_ward_name','project_details.created_at','project_details.contract')
                    ->get();
                    $records[2] = count($records[0]);
                }else{
                    $records[0] = ProjectDetails::join('sub_wards','project_details.sub_ward_id','=','sub_wards.id')
                    ->join('users','users.id','=','project_details.listing_engineer_id')
                    ->where('users.id',$id)
                    ->where('project_details.created_at','>',$date1)
                    ->where('project_details.created_at','<',$date2)
                    ->select('project_details.project_id','sub_wards.sub_ward_name','project_details.created_at','project_details.contract')
                    ->get();
                    $records[2] = count($records[0]);
                }
            }
            else
            {
                if($id == 'ALL'){
                    $records[0] = ProjectDetails::join('sub_wards','project_details.sub_ward_id','=','sub_wards.id')
                    ->join('users','users.id','=','project_details.listing_engineer_id')
                    // ->where('users.id',$id)
                    ->where('project_details.created_at','>',$date1)
                    ->where('project_details.created_at','<',$date2)->where('quality',$quality)
                    ->select('project_details.project_id','sub_wards.sub_ward_name','project_details.created_at','project_details.contract')
                    ->get();
                    $records[2] = count($records[0]);
                }else{
                    $records[0] = ProjectDetails::join('sub_wards','project_details.sub_ward_id','=','sub_wards.id')
                    ->join('users','users.id','=','project_details.listing_engineer_id')
                    ->where('users.id',$id)->where('project_details.created_at','>',$date1)
                    ->where('project_details.created_at','<',$date2)->where('quality',$quality)
                    ->select('project_details.project_id','sub_wards.sub_ward_name','project_details.created_at','project_details.contract')
                    ->get();
                    $records[2] = count($records[0]);
                }
            }

        }
        $records[1] = $id.' '.$quality.' '.$date1.' '.$date2;
        $records[4] = date('d-m-Y',strtotime($date2));
        $records[3] = date('d-m-Y',strtotime($date1));
        return response()->json($records);
    }
    public function viewEmployee(Request $id)
    {
        $user = User::where('employeeId',$id->UserId)->first();
        $details = EmployeeDetails::Where('employee_id',$id->UserId)->first();
        $bankdetails = BankDetails::where('employeeId',$id->UserId)->first();
        $assets = AssetInfo::where('employeeId',$id->UserId)->get();
        $certificates = Certificate::where('employeeId',$id->UserId)->get();
        return view('viewEmployee',['user'=>$user,'details'=>$details,'bankdetails'=>$bankdetails,'assets'=>$assets,'certificates'=>$certificates]);
    }
    public function teamLeadHome(request $request){

           $this->getid();
           $data=$this->variable;

         $depts=[1,2];

          
         
        $loggedInUsers = FieldLogin::where('logindate',date('Y-m-d'))
                        ->join('users','field_login.user_id','users.id')
                        ->whereIn('department_id',$depts)
                        ->select('users.name','field_login.*','users.employeeId')
                        ->get();


              

        
        $tl1= Tlwards::where('group_id','=',22)->get();
        $usersId = "null";
        $userid = Auth::user()->id;


        foreach($tl1 as $searchWard){
            if($searchWard->user_id == $userid){
                
            $usersId = explode(",",$searchWard->users);
            }
        }
 

        $depts=[1,2];
        $users = User::all();

        $leLogins = loginTime::where('logindate',date('Y-m-d'))
                        ->join('users','login_times.user_id','users.id')
                        ->leftjoin('departments','users.department_id','departments.id')
                        ->select('users.name','users.employeeId','login_times.*','departments.id')
                        ->get();


          $login = loginTime::where('logindate',date('Y-m-d'))->where('user_id',Auth::user()->id)->first();

          $newwards = [];
         foreach($users as $user){
                $tlwards = Tlwards::where('user_id',$user->id)->first();
                if($tlwards == null){   
                }
                else{
                $wardids = explode(",",$tlwards->ward_id);
                $noofwardids = Ward::whereIn('id',$wardids)->get()->toArray();
                $userIds = explode(",",$tlwards->users);
                $noOfUsers = User::whereIn('id',$userIds)->get()->toArray();
                array_push($newwards,['tl_id'=>$user->id,'wardtl'=>$noofwardids,'tlusers'=>$noOfUsers]);
            }
        }
        $date=date('Y-m-d');
         $departments = Department::whereIn('id',[1,2])->get();
         $groups = Group::whereIn('id',[2,6,7,22])->get();
        $followup = Requirement::where('follow_up','LIKE',$date.'%')->get();
     
         $customerids = customerassign::where('user_id',Auth::user()->id)->pluck('customerids')->first();
             $today = date('d-m-y');
          $totalcount = explode(",", $customerids);
         $past = date('Y-m-d',strtotime("-30 days",strtotime($today)));
         $visit = VisitedCustomers::where('user_id',Auth::user()->id)->count();
             
           $bal = count($totalcount) - $visit ;
          
           $date=date('Y-m-d');
        
         $today = VisitedCustomers::where('user_id',Auth::user()->id)->where('updated_at','LIKE',$date."%")->count();

          if($request->name){

         $sale = CategoryTarget::where('category',$request->name)->first();

          if(count($sale) == 0){
            return back()->with('error',"Seleted  Category is not Targeted please select other category");
          }
       

        
         $cates = [];
   
          $catname = Category::where('id',$sale->category)->pluck('category_name')->first();
           
          $invoice = MamahomePrice::where('category',$catname)->where('created_at','>=',$sale->start)->where('created_at','<=',$sale->end)->sum('amountwithgst');
          
           $gst = Gst::where('Category',$catname)->first();
                if($gst->cgst != NULL){

                  $gstval = ($gst->cgst + $gst->sgst);
                }else{
                  $gstval = ($gst->igst);
                }

                 $oders = MamahomePrice::where('category',$catname)->where('created_at','>=',$sale->start)->where('created_at','<=',$sale->end)->pluck('order_id');
           
           $sp = Supplierdetails::whereIn('order_id',$oders)->sum('totalamount');
       
           $total = $invoice - $sp;

           $tp = ($total * ($gstval/100));
            
            $bals = $total - $tp;
            $finaltp = ($sale->totalatpmount) - ($bals);
            
              $catamount = ($sale->quantity * $sale->price);
            $yet = $catamount - $invoice;
         array_push($cates,['category'=>$catname,'invoice'=>$yet,'categorytarget'=>$catamount]);

          }else{
           $sale = CategoryTarget::where('category',36)->first();

          
            $cates = [];
   
          $catname = Category::where('id',$sale->category)->pluck('category_name')->first();


           
          $invoice = MamahomePrice::where('category',$catname)->wheredate('created_at','>=',$sale->start)->wheredate('created_at','<=',$sale->end)->sum('amountwithgst');
          
           $gst = Gst::where('Category',$catname)->first();
                if($gst->cgst != NULL){

                  $gstval = ($gst->cgst + $gst->sgst);
                }else{
                  $gstval = ($gst->igst);
                }

                 $oders = MamahomePrice::where('category',$catname)->wheredate('created_at','>=',$sale->start)->wheredate('created_at','<=',$sale->end)->pluck('order_id');
           
           $sp = Supplierdetails::whereIn('order_id',$oders)->sum('totalamount');
       
           $total = $invoice - $sp;

           $tp = ($total * ($gstval/100));
            
            $bals = $total - $tp;
            $finaltp = ($sale->totalatpmount) - ($bals);
            
              $catamount = ($sale->quantity * $sale->price);
            $yet = $catamount - $invoice;
         array_push($cates,['category'=>$catname,'invoice'=>$yet,'categorytarget'=>$catamount]);

         $no = UpdatedReport::where('created_at','LIKE',$date.'%')->where('quntion',"notinterest")->pluck('manu_id');
          $nos = UpdatedReport::where('created_at','LIKE',$date.'%')->where('quntion',"notinterest")->pluck('project_id');
         $notinterest = Manufacturer::whereIn('id',$no)->get();
         $notinterests = ProjectDetails::whereIn('project_id',$nos)->get();  
          }
         return view('/teamLeader',['loggedInUsers'=>$loggedInUsers,'leLogins'=> $leLogins,'users'=>$users,'usersId'=>$usersId,'newwards'=>$newwards,'followup'=>$followup,'departments'=>$departments,'groups'=>$groups,'today'=>$today,'total'=>count($totalcount),'bal'=>$bal,'cates'=>$cates,'login'=>$login,'notinterest'=>$notinterest,'notinterests'=>$notinterests]);
   }
     public function assignListSlots(){
    // $group = Group::where('group_name','Listing Engineer')->pluck('id')->first();
    $group = [6,11,7,17,2,23,22,1];
        $users = User::whereIn('group_id',$group)
                        ->leftjoin('ward_assignments','ward_assignments.user_id','=','users.id')
                        ->leftjoin('sub_wards','sub_wards.id','=','ward_assignments.subward_id')
                        ->leftjoin('wards','wards.id','=','sub_wards.ward_id' )
                        ->leftjoin('employee_details','users.employeeId','=','employee_details.employee_id')
                        ->where('department_id','!=','10')
                        ->select('users.employeeId','users.id','users.name','ward_assignments.status','sub_wards.sub_ward_name','sub_wards.sub_ward_image','ward_assignments.prev_subward_id','employee_details.office_phone')
                        ->get();
                        
        $tl = Tlwards::where('user_id',Auth::user()->id)->pluck('users')->first();
        $userIds = explode(",", $tl);
      $tlUsers= User::whereIn('users.id',$userIds)
                        ->whereIn('users.group_id',$group)
                        ->leftjoin('ward_assignments','ward_assignments.user_id','=','users.id')
                        ->leftjoin('sub_wards','sub_wards.id','=','ward_assignments.subward_id')
                        ->leftjoin('wards','wards.id','=','sub_wards.ward_id' )
                        ->leftjoin('employee_details','users.employeeId','=','employee_details.employee_id')
                        ->where('department_id','!=','10')
                        ->select('users.employeeId','users.id','users.name','ward_assignments.status','sub_wards.sub_ward_name','sub_wards.sub_ward_image','ward_assignments.prev_subward_id','employee_details.office_phone')
                        ->get();

       $totalcount = User::whereIn('group_id',$group)
                            ->where('department_id','!=','10')
                            ->count();

        $tl = Tlwards::where('user_id',Auth::user()->id)->pluck('ward_id')->first();
        $tlward = explode(",",$tl);


         if(Auth::user()->group_id != 22){
        $wards = Ward::orderby('ward_name','ASC')->get();
         }else{
             $wards = Ward::orderby('ward_name','ASC')->whereIn('id',$tlward)->get();
         }

        $zones = Zone::all();
        $subwardsAssignment = WardAssignment::all();
        $subwards = SubWard::orderby('sub_ward_name','ASC')->get();



        return view('assignListSlots',['users'=>$users,'subwards'=>$subwards,'subwardsAssignment'=>$subwardsAssignment,'wards'=>$wards,'zones'=>$zones,'totalcount'=>$totalcount,'tlUsers'=> $tlUsers]);
    }
     public function assignadmin(){
    $group = Group::where('group_name','Admin')->pluck('id')->first();
        $users = User::where('group_id',$group)
                        ->leftjoin('ward_assignments','ward_assignments.user_id','=','users.id')
                        ->leftjoin('sub_wards','sub_wards.id','=','ward_assignments.subward_id')
                        ->leftjoin('wards','wards.id','=','sub_wards.ward_id' )
                        ->leftjoin('employee_details','users.employeeId','=','employee_details.employee_id')
                        ->where('department_id','!=','10')
                        ->select('users.employeeId','users.id','users.name','ward_assignments.status','sub_wards.sub_ward_name','sub_wards.sub_ward_image','ward_assignments.prev_subward_id','employee_details.office_phone')
                        ->get();


        $wards = Ward::orderby('ward_name','ASC')->get();
        $zones = Zone::all();
        $subwardsAssignment = WardAssignment::all();
        $subwards = SubWard::orderby('sub_ward_name','ASC')->get();

        return view('assignadmin',['users'=>$users,'subwards'=>$subwards,'subwardsAssignment'=>$subwardsAssignment,'wards'=>$wards,'zones'=>$zones]);
    }
     public function tlmaps(request $request)
    {
         if(Auth::user()->group_id != 22){
            return $this->tlmaps1($request);
         }

        $tl= Tlwards::where('user_id',Auth::user()->id)->pluck('ward_id')->first();
        $tlward = explode(",",$tl); 
        $wards = Ward::orderby('ward_name','ASC')
        ->whereIn('id',  $tlward)->get();
        $zones = Zone::all();
        return view('tlMaps',['wards'=>$wards,'zones'=>$zones]);
    }
    public function tlmaps1(request $request)
    {
        $wards = Ward::orderby('ward_name','ASC')->get();
        $zones = Zone::all();
        return view('tlMaps',['wards'=>$wards,'zones'=>$zones]);
    }

    public function loadSubWards(Request $request)
    {
        $subwards = Subward::where('ward_id',$request->ward_id)
                            ->orderby('sub_ward_name','ASC')
                            ->select('id','sub_ward_name')
                            ->get();
        if(count($subwards) > 0)
        {
            return response()->json($subwards);
        }
        else
        {
            return response()->json('No Sub Wards Found !!!');
        }
    }
    public function masterData(Request $request)
    {
        $wards = Ward::orderBy('ward_name','ASC')->get();
        $countries = Country::all();
        $subwards = SubWard::orderby('sub_ward_name','ASC')->get();
        $states = State::all();
        $zones = Zone::all();

        $dist_states = states_dists::All();
        $customertypes= CustomerType::All();
        $customer_type= $request->id;
        $sub_customer_details= CustomerType::where('sub_customer_id','!=',null)->get();
        $customer_details = CustomerType::where('sub_customer_id',null)->get();
       
        return view('masterData',[
            'sub_customer_details'=>$sub_customer_details,             
            'customertypes'=>$customertypes, 
                        'dist_states'=>$dist_states, 
                        'wards'=>$wards,
                        'countries'=>$countries,
                        'subwards'=>$subwards,
                        'states'=>$states,
                        'zones'=>$zones,
                        'customer_type'=> $customer_type,
                        'customer_details'=> $customer_details
                        ]
                    )
                ;
     }

    public function addCustomertype(Request $request)
    {
        $customer_type= $request->cust_type;
        $customer = new CustomerType;
        $customer->cust_type=$customer_type;
        $customer->cust_type_id=md5(microtime(true).mt_Rand());
        $customer->save();
        return back();
    }

    
    public function addSubCustomers(Request $request)
    {
       $sub_name = $request->cust_name;
       $sub_cust_id=$request->cust_type_id; 
       $customer = new CustomerType;
       $customer -> cust_type =$request->cust_type ;
       $customer->cust_type_id=md5(microtime(true).mt_Rand());
       $customer->sub_customer_id = $sub_name;
       $customer->save();
       return back();
    }

    public function addDistrict(Request $request)
    {
        $id= $request->id;
        $zone_id= $request->zone;
        $ward_id=$request->ward;
        $parent_id=$request->dist_states;
        $dist_id=$request->dist;
        $store_dist= New assign_states_dist;
        $store_dist->zone_id=$zone_id;
        $store_dist->ward_id=$ward_id;
        $store_dist->parent_id=$parent_id;
        $store_dist->dist_id=$dist_id;
        $store_dist->save();
        return back();
    }

    public function loaddist_states(Request $request)
    {
     
        $dist= states_dists::where("parent_id",$request->dist_id)->get();
        return  response()->json($dist);   
    }

    public function load_wards(Request $request)
    {
        
        $ward = Ward::where("zone_id",$request->zone_id)->get();
        return  response()->json($ward);   
    }

    public function getDistwithstates(Request $request)
    {
        
        $dist_with_ward= assign_states_dist::where("ward_id",$request->ward_id)->pluck('dist_id');
        $dist_with_states = states_dists::whereIn("id",$dist_with_ward)->get();

       
        return  response()->json($dist_with_states);   
    }

    public function listingEngineer()
    {  
       $tl = Tlwards::where('user_id',Auth::user()->id)->pluck('ward_id')->first();
       $tlwards = Subward::where('ward_id',$tl)->get();
        $this->variable=$tlwards;
        $date=date('Y-m-d');
        $log = FieldLogin::where('user_id',Auth::user()->id)->where('created_at','LIKE',$date.'%')->count();
         $log1 = FieldLogin::where('user_id',Auth::user()->id)->where('logout','!=','NULL')->pluck('logout')->count();
        $wardsAssigned = WardAssignment::where('user_id',Auth::user()->id)->pluck('subward_id')->first();
        $a =Subward::where('id',$wardsAssigned)->pluck('ward_id')->first();
        $acc = Subward::where('ward_id',$a)->get();
        $Wards = [];
      $hello = Ward::all();
     foreach($hello as $user){
           
                $noOfwards = WardMap::where('ward_id',$user->id)->first();
                array_push($Wards,['ward'=>$noOfwards,'wardid'=>$user->id]);
            }
              $allwardlats = [];
              foreach ($Wards as $all) {

               
                  $allx = explode(",",$all['ward']['lat']);
                  $wardid = $all['wardid'];
               
                  array_push($allwardlats, ['lat'=>$allx,'wardid'=>$wardid]);
               }
             
         
    $a = [];
    for($j = 0; $j<sizeof($allwardlats);$j++){
        $finalward = [];

        $wardId = $allwardlats[$j]['wardid'];
        
    for($i=0;$i<sizeof($allwardlats[$j]['lat'])-3; $i+=2){

         $lat = $allwardlats[$j]['lat'][$i];
         $long =  $allwardlats[$j]['lat'][$i+1];
        $latlong = "{lat: ".$lat.", lng: ".$long."}";
       
         array_push($finalward,$latlong);

    }

       array_push($a,['lat'=>$finalward,'ward'=>$wardId]);

   }

    $d = response()->json($a);

     $subwards = SubWard::where('id',$wardsAssigned)->first();
        return view('listingEngineer',['subwards'=>$subwards,'log'=>$log,'log1'=>$log1,'tlwards'=>$tlwards,'acc'=>$acc,'ward'=>$d]);
    }
    
    public function leDashboard()
    {
        $date_t=date('Y-m-d');
        $date_today = FieldLogin::where('user_id',Auth::user()->id)->where('created_at','LIKE',$date_t.'%')->first();
        $date = date('Y-m-d');
           $log = FieldLogin::where('user_id',Auth::user()->id)->where('created_at','LIKE',$date.'%')->count();
           
           $log1 = FieldLogin::where('user_id',Auth::user()->id)->where('logout','!=','NULL')->pluck('logout')->count();

      
          
        $users = User::where('department_id','1')->where('group_id','6')
                    ->leftjoin('ward_assignments','users.id','ward_assignments.user_id')
                    ->leftjoin('sub_wards','ward_assignments.subward_id','sub_wards.id')
                    ->select('users.*','sub_wards.sub_ward_name')
                    ->get();
        $accusers = User::where('department_id','2')->where('group_id','11')
                    ->leftjoin('ward_assignments','users.id','ward_assignments.user_id')
                    ->leftjoin('sub_wards','ward_assignments.subward_id','sub_wards.id')
                    ->select('users.*','sub_wards.sub_ward_name')
                    ->get();
        foreach($accusers as $user){
                $totalaccount[$user->id] = ProjectDetails::where('listing_engineer_id',$user->id)
                                                ->where('created_at','LIKE',$date.'%')
                                                ->count();
        }
        
        foreach($users as $user){
                $totalListing[$user->id] = ProjectDetails::where('listing_engineer_id',$user->id)
                                                ->where('created_at','LIKE',$date.'%')
                                                ->count();
        }
        $ordersInitiated = Requirement::where('generated_by',Auth::user()->id)
                            ->where( 'created_at', '>=', Carbon::now()->firstOfMonth())
                            ->count();


        $ordersConfirmed = Requirement::where('generated_by',Auth::user()->id)
                           ->where( 'created_at', '>=', Carbon::now()->firstOfMonth())
                            ->where('status','Order Confirmed')->count();



        $check = loginTime::where('user_id',Auth::user()->id)
            ->where('logindate',date('Y-m-d'))->first();
        if(($check)== null){
            $login = New loginTime;
            $login->user_id = Auth::user()->id;
            $login->logindate = date('Y-m-d');
            $login->loginTime = date('H:i A');
            $login->logoutTime = "N/A";
            $login->save();
        }
        date_default_timezone_set("Asia/Kolkata");
        $loginTime = mktime(05,15,00);
        $logoutTime = mktime(22,45,00);
        $outtime = date('H:i:sA',$logoutTime);
        $ldate = date('H:i:sA');
        $lodate = date('H:i:sA',$loginTime);
        $today = date('Y-m-d');
        $projectCount = count(ProjectDetails::where('listing_engineer_id',Auth::user()->id)
            ->where('created_at','like',$today.'%')->get());
        $loginTimes = loginTime::where('user_id',Auth::user()->id)->where('logindate',$today)->first();
        $totalLists = $loginTimes->TotalProjectsListed;

        $numbercount = count(ProjectDetails::where('listing_engineer_id',Auth::user()->id)->get());
        $wardsAssigned = WardAssignment::where('user_id',Auth::user()->id)->where('status','Not Completed')->pluck('subward_id')->first();
        $subwards = SubWard::where('id',$wardsAssigned)->first();


       $projects = ProjectDetails::join('site_addresses','project_details.project_id','=','site_addresses.project_id')
                        ->leftJoin('requirements','project_details.project_id','=','requirements.project_id')
                        ->where('project_details.sub_ward_id',$wardsAssigned)
                        ->select('requirements.status','site_addresses.address','site_addresses.latitude','site_addresses.longitude','project_details.project_name','project_details.project_id','project_details.created_at','project_details.updated_at','project_details.image')
                        ->get();




        $genuineprojects = count(ProjectDetails::where('quality','Genuine')
                        ->leftjoin('site_addresses','project_details.project_id','=','site_addresses.project_id')
                        ->leftJoin('requirements','project_details.project_id','=','requirements.project_id')
                        ->where('project_details.sub_ward_id',$wardsAssigned)
                        ->select('requirements.status','site_addresses.address','site_addresses.latitude','site_addresses.longitude','project_details.project_name','project_details.project_id','project_details.created_at','project_details.updated_at')
                        ->get());

        $unverifiedprojects = count(ProjectDetails::where('quality','Unverified')
                        ->leftjoin('site_addresses','project_details.project_id','=','site_addresses.project_id')
                        ->leftJoin('requirements','project_details.project_id','=','requirements.project_id')
                        ->where('project_details.sub_ward_id',$wardsAssigned)
                        ->select('requirements.status','site_addresses.address','site_addresses.latitude','site_addresses.longitude','project_details.project_name','project_details.project_id','project_details.created_at','project_details.updated_at')
                        ->get());
        $fakeprojects = count(ProjectDetails::where('quality','Fake')
                        ->leftjoin('site_addresses','project_details.project_id','=','site_addresses.project_id')
                        ->leftJoin('requirements','project_details.project_id','=','requirements.project_id')
                        ->where('project_details.sub_ward_id',$wardsAssigned)
                        ->select('requirements.status','site_addresses.address','site_addresses.latitude','site_addresses.longitude','project_details.project_name','project_details.project_id','project_details.created_at','project_details.updated_at')
                        ->get());

        $totalprojects = count($projects);




       $today = date('Y-m-d');
        $past = date('Y-m-d',strtotime("-30 days",strtotime($today)));
       $update =User::leftjoin('project_details','project_details.listing_engineer_id','users.id')
                    ->where('project_details.sub_ward_id',$wardsAssigned)
                    ->where('users.id',Auth::user()->id)
                   ->where('project_details.updated_at',">=",$past)->pluck('project_details.project_id')->count();

         $bal = $totalprojects  -  $update;



        $prices = CategoryPrice::all();
        $points_earned_so_far = Point::where('user_id',Auth::user()->id)->where('confirmation',1)->where('created_at','LIKE',date('Y-m-d')."%")->where('type','Add')->sum('point');
        $points_subtracted = Point::where('user_id',Auth::user()->id)->where('confirmation',1)->where('created_at','LIKE',date('Y-m-d')."%")->where('type','Subtract')->sum('point');
        $points_indetail = Point::where('user_id',Auth::user()->id)->where('confirmation',1)->where('created_at','LIKE',date('Y-m-d')."%")->get();
        if($subwards != null){
            $subwardMap = SubWardMap::where('sub_ward_id',$subwards->id)->first();
        }else{
            $subwardMap = "None";
        }
        if($subwardMap == Null){
            $subwardMap = "None";
        }
        // $total = $points_earned_so_far - $points_subtracted;
         $lastmonth = count(ProjectDetails::where('listing_engineer_id',Auth::user()->id)->where( 'created_at', '>=', Carbon::now()->firstOfMonth())->get());
                 $dat = DB::table('notifications')->where('user_id',Auth::user()->id)->latest()->first();
                    if($dat == null){
                        $data = 1; 
                    }else{

                       $data = DB::table('notifications')->where('id',$dat->id)->where('approve',1)->count();
                    }
         $dat = DB::table('notifications')->where('user_id',Auth::user()->id)->latest()->first();
                       if($dat != null){
                       $dataf = DB::table('notifications')->where('id',$dat->id)->where('logout',1)->count(); 

                     }else{
                       $dataf =1;

                     }
                  
                       
        return view('listingEngineerDashboard',['date_today'=>$date_today,
                                                'prices'=>$prices,
                                                'subwards'=>$subwards,
                                                'projects'=>$projects,
                                                'numbercount'=>$numbercount,
                                                'lastmonth' =>$lastmonth,
                                                'ldate'=>$ldate,
                                                'lodate'=>$lodate,
                                                'outtime'=>$outtime,
                                                'total'=>$totalLists,
                                                'ordersInitiated'=>$ordersInitiated,
                                                'ordersConfirmed'=>$ordersConfirmed,
                                                'points_indetail'=>$points_indetail,
                                                'points_earned_so_far'=>$points_earned_so_far,
                                                'points_subtracted'=>$points_subtracted,
                                                'subwardMap'=>$subwardMap,
                                                'totalprojects'=>$totalprojects,
                                                'genuineprojects'=>$genuineprojects,
                                                'unverifiedprojects'=>$unverifiedprojects,
                                                'fakeprojects'=>$fakeprojects,
                                                'totalListing'=> $totalListing,
                                                'users'=>$users,
                                                'accusers'=>$accusers,
                                                // 'totalaccount'=>$totalaccount,
                                                'update' =>  $update,
                                                'bal'=>$bal,
                                                'log'=>$log,
                                                'log1'=>$log1,
                                                 'data'=>$data,
                                                 'dataf'=>$dataf
                                                // 'total'=>$total
                                                ]);
    }


public function sales(Request $request){



     $wardsAssigned = WardAssignment::where('user_id',$request->userId)->where('status','Not Completed')->pluck('subward_id')->first();
        $subwards = SubWard::where('id',$wardsAssigned)->first();

$projects = ProjectDetails::join('site_addresses','project_details.project_id','=','site_addresses.project_id')
                        ->leftJoin('requirements','project_details.project_id','=','requirements.project_id')
                        ->where('project_details.sub_ward_id',$wardsAssigned)
                        ->select('requirements.status','site_addresses.address','site_addresses.latitude','site_addresses.longitude','project_details.project_name','project_details.project_id','project_details.created_at','project_details.updated_at')
                        ->get();

        $genuineprojects = count(ProjectDetails::where('quality','Genuine')
                        ->leftjoin('site_addresses','project_details.project_id','=','site_addresses.project_id')
                        ->leftJoin('requirements','project_details.project_id','=','requirements.project_id')
                        ->where('project_details.sub_ward_id',$wardsAssigned)
                        ->select('requirements.status','site_addresses.address','site_addresses.latitude','site_addresses.longitude','project_details.project_name','project_details.project_id','project_details.created_at','project_details.updated_at')
                        ->get());

        $unverifiedprojects = count(ProjectDetails::where('quality','Unverified')
                        ->leftjoin('site_addresses','project_details.project_id','=','site_addresses.project_id')
                        ->leftJoin('requirements','project_details.project_id','=','requirements.project_id')
                        ->where('project_details.sub_ward_id',$wardsAssigned)
                        ->select('requirements.status','site_addresses.address','site_addresses.latitude','site_addresses.longitude','project_details.project_name','project_details.project_id','project_details.created_at','project_details.updated_at')
                        ->get());
        $fakeprojects = count(ProjectDetails::where('quality','Fake')
                        ->leftjoin('site_addresses','project_details.project_id','=','site_addresses.project_id')
                        ->leftJoin('requirements','project_details.project_id','=','requirements.project_id')
                        ->where('project_details.sub_ward_id',$wardsAssigned)
                        ->select('requirements.status','site_addresses.address','site_addresses.latitude','site_addresses.longitude','project_details.project_name','project_details.project_id','project_details.created_at','project_details.updated_at')
                        ->get());

        $totalprojects = count($projects);




       $update =User::leftjoin('project_details','project_details.listing_engineer_id','users.id')
                    ->where('project_details.sub_ward_id',$wardsAssigned)
                   ->where('project_details.updated_at','LIKE',date('Y-m-d')."%")->pluck('project_details.project_id')->count();

         $bal = $totalprojects  -  $update ;


         return response()->json(['balance'=>$bal]);


}



    public function projectList()
    {
        $projectlist = ProjectDetails::where('listing_engineer_id',Auth::user()->id)->get();
        return view('projectlist',['projectlist'=>$projectlist]);
    }
    public function editProject(request $request)
    {
       
        $date=date('Y-m-d');
        $log = FieldLogin::where('user_id',Auth::user()->id)->where('created_at','LIKE',$date.'%')->count();
         $log1 = FieldLogin::where('user_id',Auth::user()->id)->where('logout','!=','NULL')->pluck('logout')->count();
        $projectdetails = ProjectDetails::withTrashed()->where('project_id',$request->projectId)->with('ownerdetails')->first();
        $projectimages = ProjectImage::where('project_id',$request->projectId)->get();
        $projectupdate = ProjectImage::where('project_id',$request->projectId)->pluck('created_at')->last();
        if(Auth::user()->group_id == 22){
           $wardsAssigned = $request->subward; 
        }else{
            
        $wardsAssigned = WardAssignment::where('user_id',Auth::user()->id)->pluck('subward_id')->first();
        }
        $subwards = SubWard::where('id',$wardsAssigned)->first();
        $roomtypes = RoomType::where('project_id',$request->projectId)->get();
        $projectward = SubWard::where('id',$projectdetails->sub_ward_id)->pluck('sub_ward_name')->first();
        $user = User::where('id',$projectdetails->listing_engineer_id)->pluck('name')->first();
        $updater = User::where('id',$projectdetails->updated_by)->first();
        // $projectdetails['budgetType'] = explode(",", $projectdetails['budgetType']);
       
        return view('update',[
                    'updater'=>$updater,
                    'username'=>$user,
                    'subwards'=>$subwards,
                    'projectdetails'=>$projectdetails,
                    'projectimages'=>$projectimages,
                    'projectward'=>$projectward,
                    'projectupdate'=>$projectupdate,
                    'roomtypes'=>$roomtypes,
                    'log'=>$log,
                    'log1'=>$log1

                ]);
    }


    public function viewAll()
    {
        $allProjects = ProjectDetails::all();
        return view('allProjects',['allProjects'=>$allProjects]);
    }
    public function viewDetails($id)
    {
        $projectdetails = ProjectDetails::where('project_id',$id)->first();
        return view('viewDetails',['projectdetails'=>$projectdetails]);
    }
    public function getRoads()
    {
        $date=date('Y-m-d');
        $log = FieldLogin::where('user_id',Auth::user()->id)->where('created_at','LIKE',$date.'%')->count();
         $log1 = FieldLogin::where('user_id',Auth::user()->id)->where('logout','!=','NULL')->pluck('logout')->count();
       $assignment = WardAssignment::where('user_id',Auth::user()->id)->pluck('subward_id')->first();
        // $roads = ProjectDetails::where('sub_ward_id',$assignment)->select('road_name')->groupby('road_name')->paginate(10);

        // $roadname = ProjectDetails::where('sub_ward_id',$assignment)->groupby('road_name')->pluck('road_name');

         $todays = ProjectDetails::where('listing_engineer_id',Auth::user()->id)->where('created_at','LIKE',date('Y-m-d')."%")->count();

        // $projectcount = array();

        // foreach($roadname as $roadname){
            $genuine = ProjectDetails::where('quality','Genuine')
                                                    ->where('sub_ward_id',$assignment)
                                                    ->paginate(10);
             $genuine1 = ProjectDetails::where('quality','Genuine')
                                                    ->where('sub_ward_id',$assignment)
                                                    ->count();                                        

            $null = ProjectDetails::where('quality','Unverified')
                                                    ->where('sub_ward_id',$assignment)
                                                    ->paginate(10);
               $null1 = ProjectDetails::where('quality','Unverified')
                                                    ->where('sub_ward_id',$assignment)
                                                    ->count();
            $fake = ProjectDetails::where('quality','Fake')
                                                    ->where('sub_ward_id',$assignment)
                                                    ->paginate(10);
            $fake1 = ProjectDetails::where('quality','Fake')
        ->where('sub_ward_id',$assignment)
        ->count();


            // $projectCount = $null + $genuine; + $fake;

        // }

      date_default_timezone_set("Asia/Kolkata");
        $loginTime = mktime(05,15,00);
        $logoutTime = mktime(22,45,00);
        $outtime = date('H:i:sA',$logoutTime);
        $ldate = date('H:i:sA');
        $lodate = date('H:i:sA',$loginTime);

        $today = date('Y-m-d');
        $projectCount = count(ProjectDetails::where('listing_engineer_id',Auth::user()->id)
            ->where('created_at','like',$today.'%')->get());
        $loginTimes = loginTime::where('user_id',Auth::user()->id)->where('logindate',$today)->first();
        $totalLists = $loginTimes->TotalProjectsListed;

        $numbercount = count(ProjectDetails::where('listing_engineer_id',Auth::user()->id)->get());
        $wardsAssigned = WardAssignment::where('user_id',Auth::user()->id)->where('status','Not Completed')->pluck('subward_id')->first();
        $subwards = SubWard::where('id',$wardsAssigned)->first();


       $projects = ProjectDetails::join('site_addresses','project_details.project_id','=','site_addresses.project_id')
                        ->leftJoin('requirements','project_details.project_id','=','requirements.project_id')
                        ->where('project_details.sub_ward_id',$wardsAssigned)
                        ->select('requirements.status','site_addresses.address','site_addresses.latitude','site_addresses.longitude','project_details.project_name','project_details.project_id','project_details.created_at','project_details.updated_at')
                        ->get();




        $genuineprojects = count(ProjectDetails::where('quality','Genuine')
                        ->leftjoin('site_addresses','project_details.project_id','=','site_addresses.project_id')
                        ->leftJoin('requirements','project_details.project_id','=','requirements.project_id')
                        ->where('project_details.sub_ward_id',$wardsAssigned)
                        ->select('requirements.status','site_addresses.address','site_addresses.latitude','site_addresses.longitude','project_details.project_name','project_details.project_id','project_details.created_at','project_details.updated_at')
                        ->get());

        $unverifiedprojects = count(ProjectDetails::where('quality','Unverified')
                        ->leftjoin('site_addresses','project_details.project_id','=','site_addresses.project_id')
                        ->leftJoin('requirements','project_details.project_id','=','requirements.project_id')
                        ->where('project_details.sub_ward_id',$wardsAssigned)
                        ->select('requirements.status','site_addresses.address','site_addresses.latitude','site_addresses.longitude','project_details.project_name','project_details.project_id','project_details.created_at','project_details.updated_at')
                        ->get());
        $fakeprojects = count(ProjectDetails::where('quality','Fake')
                        ->leftjoin('site_addresses','project_details.project_id','=','site_addresses.project_id')
                        ->leftJoin('requirements','project_details.project_id','=','requirements.project_id')
                        ->where('project_details.sub_ward_id',$wardsAssigned)
                        ->select('requirements.status','site_addresses.address','site_addresses.latitude','site_addresses.longitude','project_details.project_name','project_details.project_id','project_details.created_at','project_details.updated_at')
                        ->get());

        $totalprojects = count($projects);

       $gc = $genuine1 + $null1 + $fake1;


       $today = date('Y-m-d');
        $past = date('Y-m-d',strtotime("-30 days",strtotime($today)));
       $update =User::leftjoin('project_details','project_details.listing_engineer_id','users.id')
                    ->where('project_details.sub_ward_id',$wardsAssigned)
                    ->where('users.id',Auth::user()->id)
                   ->where('project_details.updated_at',">=",$past)->pluck('project_details.project_id')->count();

         $bal = $totalprojects  -  $update;                                             


        return view('requirementsroad',['todays'=>$todays,'genuine'=>$genuine,'null'=>$null,'fake'=>$fake, 'subwards'=>$subwards,
             'projects'=>$projects,
            'numbercount'=>$numbercount,
             'totalprojects'=>$totalprojects,
            'genuineprojects'=>$genuineprojects,
            'unverifiedprojects'=>$unverifiedprojects,
            'fakeprojects'=>$fakeprojects,
            'bal'=>$bal,'update'=>$update,
             'log'=>$log,
             'log1'=>$log1,
                  'gc'=>$gc]);



    }
    public function viewProjectList(Request $request)
    {
        if($request->today){
            $projectlist = ProjectDetails::where('created_at','LIKE',date('Y-m-d')."%")->where('listing_engineer_id',Auth::user()->id)->get();
        }else{
            $assignment = WardAssignment::where('user_id',Auth::user()->id)->pluck('subward_id')->first();
            $projectlist = ProjectDetails::where('road_name',$request->road)
            ->where('sub_ward_id',$assignment)
            ->get();
        }
        if($request->quality){
            $assignment = WardAssignment::where('user_id',Auth::user()->id)->pluck('subward_id')->first();
            $projectlist = ProjectDetails::where('quality',$request->quality)
            ->where('sub_ward_id',$assignment)
            ->get();
          
        }

        return view('projectlist',['projectlist'=>$projectlist,'pageName'=>"Update"]);
    }

    public function getMyReports(Request $request)
    {
        $date=date('Y-m-d');
        $log = FieldLogin::where('user_id',Auth::user()->id)->where('created_at','LIKE',$date.'%')->count();
        $log1 = FieldLogin::where('user_id',Auth::user()->id)->where('logout','!=','NULL')->pluck('logout')->count();
        $now = date('H:i:s');
        $currentURL = url()->current();;
        $display = "";
        $evening = "";
        
        $url ="https://mamahome.blob.core.windows.net/media";

        

        if(!$request->date){
            date_default_timezone_set("Asia/Kolkata");
            $today = date('Y-m-d');
            $projectCount = count(ProjectDetails::where('listing_engineer_id',Auth::user()->id)
                ->where('created_at','like',$today.'%')->get());
            $loginTimes = loginTime::where('user_id',Auth::user()->id)->where('logindate',$today)->first();
            $display .= "<tr><td>Login Time</td><td>:</td><td>"
                        .($loginTimes != null ? $loginTimes->loginTime : '').
                        "</td></tr><tr><td>Allocated Ward</td><td>:</td><td>"
                        .($loginTimes != null ? $loginTimes->allocatedWard : '').
                        "</td></tr><tr><td>First Listing Time</td><td>:</td><td>"
                        .($loginTimes != null ? $loginTimes->firstListingTime : '').
                        "</td></tr><tr><td>First Update Time</td><td>:</td><td>"
                        .($loginTimes != null ? $loginTimes->firstUpdateTime : '').
                        "</td></tr><tr><td>No. of Projects Listed <br> In The Morning</td><td>:</td><td>"
                        .($loginTimes != null ? $loginTimes->noOfProjectsListedInMorning : '').
                        "</td></tr><tr><td>No. of Projects Updated <br> In The Morning</td><td>:</td><td>"
                        .($loginTimes != null ? $loginTimes->noOfProjectsUpdatedInMorning : '').
                        "</td></tr><tr><td>Meter Image</td><td>:</td><td>".
                        ($loginTimes != null ? ($loginTimes->morningMeter != null ? "<img src='"
                        .$url."/meters/".$loginTimes->morningMeter.
                        "' height='100' width='200' class='img img-thumbnail'>" : '*No Image Uploaded*') : '*No Image Uploaded*').
                        "</td></tr><tr><td>Meter Reading</td><td>:</td><td>"
                        .($loginTimes != null ? $loginTimes->gtracing : '').
                        "</td></tr><tr><td>Data Image</td><td>:</td><td>".
                        ($loginTimes != null ? ($loginTimes->morningData != null ? "<img src='"
                        .$url."/data/".$loginTimes->morningData.
                        "' height='100' width='200' class='img img-thumbnail'>" : '*No Image Uploaded*') : '*No Image Uploaded*').
                        "</td></tr><tr><td>Data Reading</td><td>:</td><td>"
                        .($loginTimes != null ? $loginTimes->afternoonData : '').
                        "</td></tr><tr><td>Team Leader Remarks</td><td>:</td><td>".
                        ($loginTimes != null ? $loginTimes->morningRemarks : '')."</td></tr>";

                    $evening .= "<tr><td>Last Listing Time</td><td>:</td><td>"
                    .($loginTimes != null ? $loginTimes->lastListingTime : '').
                    "</td></tr><tr><td>Last Update Time</td><td>:</td><td>".
                    ($loginTimes != null ? $loginTimes->lastUpdateTime : '').
                    "</td></tr><tr><td>Total Projects Listed</td><td>:</td><td>".
                    ($loginTimes != null ? $loginTimes->TotalProjectsListed : '').
                    "</td></tr><tr><td>Total Projects Updated</td><td>:</td><td>".
                    ($loginTimes != null ? $loginTimes->totalProjectsUpdated : '').
                    "</td></tr><tr><td>Meter Image</td><td>:</td><td>".
                    ($loginTimes != null ? ($loginTimes->eveningMeter != null ? "<img src='"
                    .$url."/meters/".$loginTimes->eveningMeter.
                    "' height='100' width='200' class='img img-thumbnail'>" : '*No Image Uploaded*') : '*No Image Uploaded*').
                    ($loginTimes != null ? $loginTimes->eveningMeter : '').
                    "</td></tr><tr><td>Meter Reading</td><td>:</td><td>".
                    "</td></tr><tr><td>Data Image</td><td>:</td><td>".
                    ($loginTimes != null ? ($loginTimes->afternoonMeter != null ? "<img src="
                    .$url."/data/".$loginTimes->eveningData.
                    " height='100' width='200' class='img img-thumbnail'>"
                    : '*No Image Uploaded*') : '*No Image Uploaded*').
                    ($loginTimes != null ? $loginTimes->eveningData : '').
                    // "</td></tr><tr><td>Data Reading</td><td>:</td><td>".
                    // ($loginTimes != null ? $loginTimes->afternoonRemarks : '').
                     "</td></tr><tr><td>Team Leader Remark</td><td>:</td><td>".
                    ($loginTimes != null ? $loginTimes->eveningRemarks : '').
                    "</td></tr><tr><td>Asst. Manager Remarks</td><td>:</td><td>".
                    ($loginTimes != null ? $loginTimes->AmRemarks : '').
                    "</td></tr><tr><td>Grade</td><td>:</td><td>".
                    ($loginTimes != null ? $loginTimes->AmGrade : '').
                    "</td></tr></table>";
            return view('reports',[
                'evening'=>$evening,
                'display'=>$display,
                'loginTimes'=>$loginTimes,
                'projectCount'=>$projectCount,
                'now'=>$now,
                'log'=>$log,
                'log1'=>$log1
            ]);
        }else{
            $projectCount = count(ProjectDetails::where('listing_engineer_id',Auth::user()->id)
                ->where('created_at','like',$request->date.'%')->get());
            $loginTimes = loginTime::where('user_id',Auth::user()->id)->where('logindate',$request->date)->first();
            $display .= "<tr><td>Login Time</td><td>:</td><td>"
                        .($loginTimes != null ? $loginTimes->loginTime : '').
                        "</td></tr><tr><td>Allocated Ward</td><td>:</td><td>"
                        .($loginTimes != null ? $loginTimes->allocatedWard : '').
                        "</td></tr><tr><td>First Listing Time</td><td>:</td><td>"
                        .($loginTimes != null ? $loginTimes->firstListingTime : '').
                        "</td></tr><tr><td>First Update Time</td><td>:</td><td>"
                        .($loginTimes != null ? $loginTimes->firstUpdateTime : '').
                        "</td></tr><tr><td>No. of projects listed <br> in the morning</td><td>:</td><td>"
                        .($loginTimes != null ? $loginTimes->noOfProjectsListedInMorning : '').
                        "</td></tr><tr><td>No. of projects updated <br> in the morning</td><td>:</td><td>"
                        .($loginTimes != null ? $loginTimes->noOfProjectsUpdatedInMorning : '').
                        "</td></tr><tr><td>Meter Image</td><td>:</td><td>".
                        ($loginTimes != null ? ($loginTimes->morningMeter != null ? "<img src='"
                        .$url."/meters/".$loginTimes->morningMeter.
                        "' height='100' width='200' class='img img-thumbnail'>" : '*No Image Uploaded*') : '*No Image Uploaded*').
                        "</td></tr><tr><td>Meter Reading</td><td>:</td><td>"
                        .($loginTimes != null ? $loginTimes->gtracing : '').
                        "</td></tr><tr><td>Data Image</td><td>:</td><td>".
                        ($loginTimes != null ? ($loginTimes->morningData != null ? "<img src='"
                        .$url."/data/".$loginTimes->morningData.
                        "' height='100' width='200' class='img img-thumbnail'>" : '*No Image Uploaded*') : '*No Image Uploaded*').
                        "</td></tr><tr><td>Data Reading</td><td>:</td><td>"
                        .($loginTimes != null ? $loginTimes->afternoonData : '').
                        "</td></tr><tr><td>Team Leader Remarks</td><td>:</td><td>".
                        ($loginTimes != null ? $loginTimes->morningRemarks : '')."</td></tr>";

                        $evening .= "<tr><td>Last Listing Time</td><td>:</td><td>"
                    .($loginTimes != null ? $loginTimes->lastListingTime : '').
                    "</td></tr><tr><td>Last Update Time</td><td>:</td><td>".
                    ($loginTimes != null ? $loginTimes->lastUpdateTime : '').
                    "</td></tr><tr><td>Total Projects Listed</td><td>:</td><td>".
                    ($loginTimes != null ? $loginTimes->TotalProjectsListed : '').
                    "</td></tr><tr><td>Total Projects Updated</td><td>:</td><td>".
                    ($loginTimes != null ? $loginTimes->totalProjectsUpdated : '').
                    "</td></tr><tr><td>Meter Image</td><td>:</td><td>".
                    ($loginTimes != null ? ($loginTimes->eveningMeter != null ? "<img src='"
                    .$url."/meters/".$loginTimes->eveningMeter.
                    "' height='100' width='200' class='img img-thumbnail'>" : '*No Image Uploaded*') : '*No Image Uploaded*').
                    ($loginTimes != null ? $loginTimes->eveningMeter : '').
                    "</td></tr><tr><td>Meter Reading</td><td>:</td><td>".
                    "</td></tr><tr><td>Data Image</td><td>:</td><td>".
                    ($loginTimes != null ? ($loginTimes->afternoonMeter != null ? "<img src="
                    .$url."/meters/".$loginTimes->afternoonMeter.
                    " height='100' width='200' class='img img-thumbnail'>"
                    : '*No Image Uploaded*') : '*No Image Uploaded*').
                    ($loginTimes != null ? $loginTimes->eveningData : '').
                    "</td></tr><tr><td>Data Reading</td><td>:</td><td>".
                    ($loginTimes != null ? $loginTimes->afternoonRemarks : '').

                     "</td></tr><tr><td>Team Leader Remark</td><td>:</td><td>".
                    ($loginTimes != null ? $loginTimes->eveningRemarks : '').

                    "</td></tr><tr><td>Asst. Manager Remarks</td><td>:</td><td>".
                    ($loginTimes != null ? $loginTimes->AmRemarks : '').
                    "</td></tr><tr><td>Grade</td><td>:</td><td>".
                    ($loginTimes != null ? $loginTimes->AmGrade : '').
                    "</td></tr></table>";
            return view('reports',[
                'loginTimes'=>$loginTimes,
                'projectCount'=>$projectCount,
                'display'=>$display,
                'evening'=>$evening,
                'now'=>$now,
                'log'=>$log,
                'log1'=>$log1
            ]);
        }
    }
    public function updateAssignment(){
        WardAssignment::where('user_id',Auth::user()->id)->delete();
        return back();
    }
    public function viewLeReport(Request $request)
    {
        $id = $request->UserId;
        $username = User::where('id',$id)->first();
        if($request->date){
            $points_earned_so_far = Point::where('user_id',$id)
                                ->where('created_at','LIKE',$request->date."%")
                                ->where('confirmation',1)
                                ->where('type','Add')
                                ->sum('point');
            $points_subtracted = Point::where('user_id',$id)
                                ->where('created_at','LIKE',$request->date."%")
                                ->where('confirmation',1)
                                ->where('type','Subtract')
                                ->sum('point');
            $points_indetail = Point::where('user_id',$id)
                                ->where('created_at','LIKE',$request->date."%")
                                ->where('confirmation',1)
                                ->get();
            $total = $points_earned_so_far - $points_subtracted;
            $loginTimes = loginTime::where('user_id',$id)
                ->where('logindate',$request->date)->first();
            if($loginTimes != NULL){
                return view('lereportbytl',[
                    'points_earned_so_far' => $points_earned_so_far,
                    'points_subtracted'=>$points_subtracted,
                    'points_indetail'=>$points_indetail,
                    'total'=>$total,
                    'loginTimes'=>$loginTimes,
                    'userId'=>$id,
                    'username'=>$username
                    ]);
            }else{
                $loginTimes = loginTime::where('user_id',$id)
                    ->where('logindate',date('Y-m-d'))->first();
                return back()->with('Error','No Records found');
            }
        }
        $points_earned_so_far = Point::where('user_id',$id)
                                ->where('created_at','LIKE',date('Y-m-d')."%")
                                ->where('confirmation',1)
                                ->where('type','Add')
                                ->sum('point');
        $points_subtracted = Point::where('user_id',$id)
                                ->where('created_at','LIKE',date('Y-m-d')."%")
                                ->where('confirmation',1)
                                ->where('type','Subtract')
                                ->sum('point');
        $points_indetail = Point::where('user_id',$id)
                                ->where('created_at','LIKE',date('Y-m-d')."%")
                                ->where('confirmation',1)
                                ->get();
        $total = $points_earned_so_far - $points_subtracted;
        $loginTimes = loginTime::where('user_id',$id)
            ->where('logindate',date('Y-m-d'))->first();
        return view('lereportbytl',[
            'points_earned_so_far' => $points_earned_so_far,
            'points_subtracted'=>$points_subtracted,
            'points_indetail'=>$points_indetail,
            'total'=>$total,
            'loginTimes'=>$loginTimes,
            'userId'=>$id,
            'username'=>$username
            ]);
    }
    public function getRequirementRoads()
    {
        $date=date('Y-m-d');
        $log = FieldLogin::where('user_id',Auth::user()->id)->where('created_at','LIKE',$date.'%')->count();
        $log1 = FieldLogin::where('user_id',Auth::user()->id)->where('logout','!=','NULL')->pluck('logout')->count();
        $assignment = WardAssignment::where('user_id',Auth::user()->id)->pluck('subward_id')->first();
        $roadname = ProjectDetails::where('sub_ward_id',$assignment)->groupBy('road_name')->pluck('road_name');
        $roads = ProjectDetails::where('sub_ward_id',$assignment)->select('road_name')->groupBy('road_name')->paginate(10);
        $projectcount = array();
        $todays = ProjectDetails::where('listing_engineer_id',Auth::user()->id)->where('created_at','LIKE',date('Y-m-d')."%")->count();


        $name = ProjectDetails::where('sub_ward_id',$assignment)->where('quality','Genuine')->select("road_name")->groupBy('road_name')->pluck("project_id");

        foreach($roadname as $roadw){
            $genuine = ProjectDetails::where('road_name',$roadw)
                                                    ->where('quality','Genuine')
                                                    ->where('sub_ward_id',$assignment)
                                                    ->count();
            $null = ProjectDetails::where('road_name',$roadw)
                                                    ->where('quality','Unverified')
                                                    ->where('sub_ward_id',$assignment)
                                                    ->count();
            $projectcount[$roadw] = $null + $genuine;


$genuine1 = ProjectDetails::where('quality','Genuine')
                                                    ->where('sub_ward_id',$assignment)
                                                    ->count(); 
$null1 = ProjectDetails::where('quality','Unverified')
                                                    ->where('sub_ward_id',$assignment)
                                                    ->count();
$fake1 = ProjectDetails::where('quality','Fake')
        ->where('sub_ward_id',$assignment)
        ->count();

date_default_timezone_set("Asia/Kolkata");
        $loginTime = mktime(05,15,00);
        $logoutTime = mktime(22,45,00);
        $outtime = date('H:i:sA',$logoutTime);
        $ldate = date('H:i:sA');
        $lodate = date('H:i:sA',$loginTime);

        $today = date('Y-m-d');
        $projectCount = count(ProjectDetails::where('listing_engineer_id',Auth::user()->id)
            ->where('created_at','like',$today.'%')->get());
        $loginTimes = loginTime::where('user_id',Auth::user()->id)->where('logindate',$today)->first();
        $totalLists = $loginTimes->TotalProjectsListed;

        $numbercount = count(ProjectDetails::where('listing_engineer_id',Auth::user()->id)->get());
        $wardsAssigned = WardAssignment::where('user_id',Auth::user()->id)->where('status','Not Completed')->pluck('subward_id')->first();
        $subwards = SubWard::where('id',$wardsAssigned)->first();


       $projects = ProjectDetails::join('site_addresses','project_details.project_id','=','site_addresses.project_id')
                        ->leftJoin('requirements','project_details.project_id','=','requirements.project_id')
                        ->where('project_details.sub_ward_id',$wardsAssigned)
                        ->select('requirements.status','site_addresses.address','site_addresses.latitude','site_addresses.longitude','project_details.project_name','project_details.project_id','project_details.created_at','project_details.updated_at')
                        ->get();




        $genuineprojects = count(ProjectDetails::where('quality','Genuine')
                        ->leftjoin('site_addresses','project_details.project_id','=','site_addresses.project_id')
                        ->leftJoin('requirements','project_details.project_id','=','requirements.project_id')
                        ->where('project_details.sub_ward_id',$wardsAssigned)
                        ->select('requirements.status','site_addresses.address','site_addresses.latitude','site_addresses.longitude','project_details.project_name','project_details.project_id','project_details.created_at','project_details.updated_at')
                        ->get());

        $unverifiedprojects = count(ProjectDetails::where('quality','Unverified')
                        ->leftjoin('site_addresses','project_details.project_id','=','site_addresses.project_id')
                        ->leftJoin('requirements','project_details.project_id','=','requirements.project_id')
                        ->where('project_details.sub_ward_id',$wardsAssigned)
                        ->select('requirements.status','site_addresses.address','site_addresses.latitude','site_addresses.longitude','project_details.project_name','project_details.project_id','project_details.created_at','project_details.updated_at')
                        ->get());
        $fakeprojects = count(ProjectDetails::where('quality','Fake')
                        ->leftjoin('site_addresses','project_details.project_id','=','site_addresses.project_id')
                        ->leftJoin('requirements','project_details.project_id','=','requirements.project_id')
                        ->where('project_details.sub_ward_id',$wardsAssigned)
                        ->select('requirements.status','site_addresses.address','site_addresses.latitude','site_addresses.longitude','project_details.project_name','project_details.project_id','project_details.created_at','project_details.updated_at')
                        ->get());
        $today = date('Y-m-d');
        $past = date('Y-m-d',strtotime("-30 days",strtotime($today)));
       $update =User::leftjoin('project_details','project_details.listing_engineer_id','users.id')
                    ->where('project_details.sub_ward_id',$wardsAssigned)
                    ->where('users.id',Auth::user()->id)
                   ->where('project_details.updated_at',">=",$past)->pluck('project_details.project_id')->count();


        $totalprojects = count($projects);

       $gc = $genuine1 + $null1 + $fake1;
         $bal = $totalprojects  -  $update;                                             

        }
        return view('requirementsroad',['todays'=>$todays,'roads'=>$roads,'projectcount'=>$projectcount,'roadname'=>$roadname,'subwards'=>$subwards,
             'projects'=>$projects,
            'numbercount'=>$numbercount,
             'totalprojects'=>$totalprojects,
            'genuineprojects'=>$genuinepngineer_id',Auth::user()->id)
            ->where('created_at','like',$today.'%')->get());
        $loginTimes = loginTime::where('user_id',Auth::user()->id)->where('logindate',$today)->first();
        $totalLists = $loginTimes->TotalProjectsListed;

        $numbercount = count(ProjectDetails::where('listing_engineer_id',Auth::user()->id)->get());
        $wardsAssigned = WardAssignment::where('user_id',Auth::user()->id)->where('status','Not Completed')->pluck('subward_id')->first();
        $subwards = SubWard::where('id',$wardsAssigned)->first();


       $projects = ProjectDetails::join('site_addresses','project_details.project_id','=','site_addresses.project_id')
                        ->leftJoin('requirements','project_details.project_id','=','requirements.project_id')
                        ->where('project_details.sub_ward_id',$wardsAssigned)
                        ->select('requirements.status','site_addresses.address','site_addresses.latitude','site_addresses.longitude','project_details.project_name','project_details.project_id','project_details.created_at','project_details.updated_at')
                        ->get();




        $genuineprojects = count(ProjectDetails::where('quality','Genuine')
                        ->leftjoin('site_addresses','project_details.project_id','=','site_addresses.project_id')
                        ->leftJoin('requirements','project_details.project_id','=','requirements.project_id')
                        ->where('project_details.sub_ward_id',$wardsAssigned)
                        ->select('requirements.status','site_addresses.address','site_addresses.latitude','site_addresses.longitude','project_details.project_name','project_details.project_id','project_details.created_at','project_details.updated_at')
                        ->get());

        $unverifiedprojects = count(ProjectDetails::where('quality','Unverified')
                        ->leftjoin('site_addresses','project_details.project_id','=','site_addresses.project_id')
                        ->leftJoin('requirements','project_details.project_id','=','requirements.project_id')
                        ->where('project_details.sub_ward_id',$wardsAssigned)
                        ->select('requirements.status','site_addresses.address','site_addresses.latitude','site_addresses.longitude','project_details.project_name','project_details.project_id','project_details.created_at','project_details.updated_at')
                        ->get());
        $fakeprojects = count(ProjectDetails::where('quality','Fake')
                        ->leftjoin('site_addresses','project_details.project_id','=','site_addresses.project_id')
                        ->leftJoin('requirements','project_details.project_id','=','requirements.project_id')
                        ->where('project_details.sub_ward_id',$wardsAssigned)
                        ->select('requirements.status','site_addresses.address','site_addresses.latitude','site_addresses.longitude','project_details.project_name','project_details.project_id','project_details.created_at','project_details.updated_at')
                        ->get());
        $today = date('Y-m-d');
        $past = date('Y-m-d',strtotime("-30 days",strtotime($today)));
       $update =User::leftjoin('project_details','project_details.listing_engineer_id','users.id')
                    ->where('project_details.sub_ward_id',$wardsAssigned)
                    ->where('users.id',Auth::user()->id)
                   ->where('project_details.updated_at',">=",$past)->pluck('project_details.project_id')->count();


        $totalprojects = count($projects);

       $gc = $genuine1 + $null1 + $fake1;
         $bal = $totalprojects  -  $update;                                             

        }
        return view('requirementsroad',['todays'=>$todays,'roads'=>$roads,'projectcount'=>$projectcount,'roadname'=>$roadname,'subwards'=>$subwards,
             'projects'=>$projects,
            'numbercount'=>$numbercount,
             'totalprojects'=>$totalprojects,
            'genuineprojects'=>$genuinep